[global]
instructor = Instructor
tester = Brend
gpt_model = gpt-4-0613
gpt_prompt = [
	  {
	    "feedback": [
	      [
	        {
	          "role": "system",
	          "content": "You are an intelligent tutor for a introductory computer science course in Python. You never give answers but do give helpful tips to guide students with their code."
	        },
	        {
	          "role": "user",
	          "content": "{{STUDENT_CODE_HERE}}"
	        }
	      ],
	      {
	        "name": "add_code_feedback",
	        "description": "Adds feedback on the code for the student to view.",
	        "parameters": {
	          "type": "object",
	          "properties": {
	            "feedback": {
	              "type": "string",
	              "description": "Helpful tips to guide a student with their problematic code."
	            },
	            "is_error_present": {
	              "type": "boolean",
	              "description": "If there is a problem with the code, this parameter is true."
	            }
	          },
	          "required": [
	            "feedback",
	            "is_error_present"
	          ]
	        }
	      },
	      1.0,
	      1.0
	    ]
	  },
	  "<function get_prompts_getter.<locals>.get_default_prompts.<locals>.process_prompts at 0x00000193896BE8E0>"
	]
gpt_prompt_approximate_length = 409

[bakery_for_composition_code_highest_filter]
description = Define the function `high_score` that consumes a list of integers (representing scores in a game) and produces an integer representing the highest score in the list. Ignore scores less than `100`, and stop processing values if you encounter `-999`. If the list is empty, return the value `None` instead. It is up to you to decompose this function (or not) however you want.

[bakery_for_composition_code_highest_filter.Beedrill_29030778.py]
student_code = 
	from bakery import assert_equal
	
	def high_score(scores: [int]) -> int:
	    if [i for i in scores if i >= 100] == []:
	        return None
	    to_return = 100
	    for score in scores:
	        if score == -999:
	            break
	        elif score >= to_return:
	            to_return = score
	    return to_return
	
	
	assert_equal(high_score([98, 100, 99, 101, -999, 102]), 101)
	assert_equal(high_score([]), None)
	assert_equal(high_score([70]), None)
gpt_feedback = You are on the right track with your function. However, there are a few errors that you should consider amending. You have correctly given -999 the functionality to end the iteration process. However, it will not successfully find the highest score, should it exist after -999 in the list. Given that the presence of -999 should 'end the game', you might not want to check the scores after it, but if you do, this is something to consider. Also, your annotation of the input type in the function definition is not correct. It should be `List[int]` not `[int]`.
gpt_feedback_length = 98
gpt_score = 0.0
pedal_feedback = Student code failed instructor tests.
	You passed 6/8 tests.
	
	I ran your function <code class='pedal-name'>high_score</code> on some new arguments.
	<table class='pedal-table'>   <tr class='pedal-header'>
	    <th class='pedal-cell'></th>
	    <th class='pedal-cell'>Arguments</th>
	    <th class='pedal-cell'>Returned</th>
	    <th class='pedal-cell'>Expected</th>
	  </tr>     <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[100, 200, 300, -999]</code></pre></td>
	    <td class='pedal-cell'>300</td>
	    <td class='pedal-cell'>300</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[300, 200, 100, -999]</code></pre></td>
	    <td class='pedal-cell'>300</td>
	    <td class='pedal-cell'>300</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[300, 200, -999, 500, 400]</code></pre></td>
	    <td class='pedal-cell'>300</td>
	    <td class='pedal-cell'>300</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[400, 200, -999, 100, 200]</code></pre></td>
	    <td class='pedal-cell'>400</td>
	    <td class='pedal-cell'>400</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-negative-mark'>&#10060;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[-999, 400, 300, 50]</code></pre></td>
	    <td class='pedal-cell'>100</td>
	    <td class='pedal-cell'>None</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[-999]</code></pre></td>
	    <td class='pedal-cell'>None</td>
	    <td class='pedal-cell'>None</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-negative-mark'>&#10060;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[20, 40, 30, -999, 100]</code></pre></td>
	    <td class='pedal-cell'>100</td>
	    <td class='pedal-cell'>None</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[50, 200, -999, 50]</code></pre></td>
	    <td class='pedal-cell'>200</td>
	    <td class='pedal-cell'>200</td>
	  </tr></table>
pedal_feedback_length = 295
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 2
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 5
instructor_feedback_pedal_sentiment = 4

[bakery_for_composition_code_highest_filter.Buizel_29317817.py]
student_code = 
	from bakery import assert_equal
	
	def high_score(scores: list[int]) -> int:
	    high = scores[0]
	    for score in scores:
	        if score > high:
	            high = score
	    return high
gpt_feedback = Your function for finding the highest score seems to be correctly defined. It initianeously assigns the first score as the highest, then iterates through the list, updating the highest score as needed. Don't forget to test your function with actual data to ensure it behaves as expected.
gpt_feedback_length = 47
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 2
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 3

[bakery_for_composition_code_highest_filter.Darumaka_29509864.py]
student_code = 
	from bakery import assert_equal
	
	
	def high_score (scores:list[int])->int:
	    maximum=score[0]
	    for score in scores:
	        if score > maximum:
	            if score < 100:
	                return None 
	            maximum=score
	    return maximum
	
	assert_equal(high_score([500,50]), 500)
gpt_feedback = It seems like your code has a syntax error. You're referring to 'score[0]' before it is defined. I believe you meant to write 'scores[0]'. Additionally, your function doesn't return the highest score under 100, it returns None if the highest score is below 100. Do you want to consider scores under 100?
gpt_feedback_length = 52
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>score</code> was used on line 5, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 4
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 2
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 3

[bakery_for_composition_code_highest_filter.Elgyem_27313994.py]
student_code = 
	from bakery import assert_equal
	def high_score(scores: [int])->int:
	
	max_num = scores[0]
	
	mini = 100
	
	empty_list = []
	
	if scores == empty_list:
	    return None
	for score in scores:
	    if score==-999:
	        return max_num
	    if score < mini:
	        continue
	    if score == -999:
	        break
	    if score > max_num:
	        max_num = score
	        return max_num
	
	assert_equal(high_score([300, 40, 200, 150]), 300)
	
	assert_equal(high_score([50, 100, 400, -999]), 400)
	
	assert_equal(high_score([600, 800,]), 800)
	
	assert_equal(high_score([300, 200, -999, 400]), 300)
gpt_feedback = You're on the right track with this code, but there are a few potential issues to address. Firstly, be wary of return statements in loops because they will stop the loop the moment they are called, so if you have a return statement in an if condition inside a loop, the loop will stop the moment that condition is met. This happens in your code at 'if score > max_num:', where the function will return max_num and stop, even if there are more scores in the list to check. Secondly, the variable 'mini' isn't used in the function, consider removing it for cleaner code. Finally, you don't actually need to check if score==-999 because you break your loop if score == -999. You should also consider how Python interprets empty lists. Comparing your list to another empty list such as 'if scores == empty_list' is unnecessary and you can simply use 'if not scores' to check if your list is empty.
gpt_feedback_length = 161
gpt_score = 0.0
pedal_feedback = Bad indentation on line 4 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_for_composition_code_highest_filter/submissions/Elgyem_27313994.py</code>
	<pre class='pedal-python-code python'><code>max_num = scores[0]
	^</code></pre>
	</div>
	Expected an indented block after function definition on line 2.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 44
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 1
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 4
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_for_composition_code_highest_filter.Girafarig_28396215.py]
student_code = 
	from bakery import assert_equal
	
	def high_score(scores: list[int]) -> int:
	    if not scores:
	        return None
	    highest_score = scores[0]
	    taking = True
	    for score in scores:
	        if -999 == score:
	            taking = False
	        elif taking and score >= 100 and score > highest_score:
	            highest_score = score
	    if highest_score < 100:
	        return None
	    return highest_score
	
	assert_equal(high_score([101, 150, 175, -10, 53]), 175)
	assert_equal(high_score([52, 63]), None)
	assert_equal(high_score([105, -999, 175, -10, 53]), 105)
	assert_equal(high_score([]), None)
gpt_feedback = Your function seems to be working perfectly fine. It correctly assigns highest_score initially to the first score of the list, then it iterates over the array of scores and updates highest_score each time it finds a new higher score. The condition to ignore scores after -999 and only consider scores above 100 seems to be working properly as well. Good job!
gpt_feedback_length = 61
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 2
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_for_composition_code_highest_filter.Lapras_28139989.py]
student_code = 
	from bakery import assert_equal
	def high_score(List:list[int])-> int:
	    max = List[0]
	    cont_count = True
	    for nums in List:
	        if nums == -999:
	            cont_count = False
	            if nums >=100:
	                max = nums
	    return max
	
	assert_equal(high_score([150, -999, 200]), 150)
gpt_feedback = In your current implementation, you set `cont_count` to False when encountering -999, but never use this variable to break the loop or otherwise alter the flow of the function. Additionally, the check `if nums >=100` appears to be unrelated to the given task. You need to revise this part of your code. Your task is to find the maximum number in the List until -999 is encountered. As soon as -999 is encountered, the function should return the maximum number found so far.
gpt_feedback_length = 83
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>cont_count</code> was given a value on line 6, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 1
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 4
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 3

[bakery_for_composition_code_highest_filter.Liepard_28823730.py]
student_code = 
	from bakery import assert_equal
	
	def high_score(integers: list[int]) -> int:
	    highest = integers[0]
	    if len(integers) > 0:
	        for integer in integers:
	            if integer == -999:
	                return None
	            if integer >= 100:
	                if highest < integer:
	                    highest = integer
	        return highest
gpt_feedback = Your function looks mostly good, but there's an issue with your initial condition check. You're first assigning the highest value to be the first element of the array, and then checking if the array length is more than 0. This could lead to an IndexError if an empty array is passed in. The check for the list length should be done before attempting to access elements in the list. Also, you don't need to check for -999 because the problem statement does not require it. Thus, you should remove the line `if integer == -999: return None`
gpt_feedback_length = 97
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 4
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 2
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_for_composition_code_highest_filter.Nosepass_28623443.py]
student_code = 
	from bakery import assert_equal
	
	def filter_scores(scores: list[int])->list[int]:
	    #filter the scores
	    New_Scores = []
	    for score in scores:
	        if score == -999:
	            return New_Scores
	        if score > 100:
	            New_Scores.append(score)
	    return New_Scores
	
	def high_score(raw_scores: list[int])->int:
	    scores = filter_scores(raw_scores)
	    if not scores:
	        return None
	    max_s = scores[0]
	    for score in score:
	        if score > max_s:
	    return max_s
	
	assert_equal(filter_scores([1,-999,300]),[])
	assert_equal(filter_scores([1,300,500]),[300,500])
	assert_equal(filter_scores([1000,300,101]),[1000,300,101])
	
	assert_equal(high_score([1,-999,300]),None)
	assert_equal(high_score([300,200,3000]),3000)
	assert_equal(high_score([101,3,54]),101)
gpt_feedback = There are a few issues with your code. Firstly, in `filter_scores`, you should not stop the loop once you find a score of `-999`. It seems you want to filter the scores above `100` and you want to skip `-999`, so keep iterating through the scores regardless of the `-999` value. Secondly, in your `high_score` function, you have used the variable name `score` in for loop, which is not defined anywhere. You wanted to loop through the list `scores` instead. Lastly, pay attention to the `IndentationError` in the `high_score` function, following the `if` statement, Python expects indented code block.
gpt_feedback_length = 99
gpt_score = 0.0
pedal_feedback = Bad indentation on line 20 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 20 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_for_composition_code_highest_filter/submissions/Nosepass_28623443.py</code>
	<pre class='pedal-python-code python'><code>    return max_s
	   ^</code></pre>
	</div>
	Expected an indented block after 'if' statement on line 19.
	Suggestion: Check line 20, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 50
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 1
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 4
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_for_composition_code_highest_filter.Nuzleaf_32379968.py]
student_code = 
	from bakery import assert_equal
	
	def no_less_than_100(numbers:list[int])->list[int]:
	    stitch=[]
	    for number in numbers:
	        if number>=100:
	            stitch.append(number)
	    return stitch
	
	def maximum(numbers:list[int])->int:
	    purple=numbers[0]
	    for number in numbers:
	        if purple<number:
	            purple=number
	    return purple
	
	def
	        
	def high_score(numbers:list[int])->int:
	    x=no_less_than_100(numbers)
	    if not numbers:
	        return None   
	    taking=True
	    lilo=[]
	    for number in x:
	    if number==-999:
	        taking=False
	    elif taking:   
	        lilo.append(number)
	    return maximum(lilo)
	    
	assert_equal(high_score([]), None)
	assert_equal(high_score([99,2,101,100]), 101)
	assert_equal(high_score([5,-999]), 0)
gpt_feedback = There seems to be a syntax error on your code. You have a function definition `def` that is followed by nothing. Make sure to complete the definition or remove it if it's not needed. Also, your indentations seem have issue in your `high_score` function. Make sure the `if` statement under the `for` loop is indented properly. Lastly, please review the logic in your `high_score` function; it seems like if the number -999 is present, you stop considering the numbers after it. This might not be the correct logic if you're trying to get the highest score out of all numbers that are not less than 100, even if -999 appears in the list.
gpt_feedback_length = 113
gpt_score = 0.0
pedal_feedback = Bad syntax on line 17.
	
	The traceback was:
	<div class='pedal-traceback'>Line 17 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_for_composition_code_highest_filter/submissions/Nuzleaf_32379968.py</code>
	<pre class='pedal-python-code python'><code>def
	   ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 17, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 34
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 2
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_functions_flow_code_timely_extraction]
description = <p>The functions below calculate whether a given hour is in the morning (between 5am <em>and</em> 12pm). The first function <code>is_morning</code> (incomplete) has two helper functions (<code>is_past_dawn</code> and <code>is_before_noon</code>, both complete). Finish the <code>is_morning</code> function to call the other two.</p>

[bakery_functions_flow_code_timely_extraction.Beedrill_18988758.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return is_past_dawn(hour) and is_before_noon(hour)
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = Your program is designed correctly and should perform as expected. It checks whether a given hour is considered 'morning' by meeting two conditions: past dawn and before noon. The use of helper functions `is_past_dawn` and `is_before_noon` makes the code more readable and analyzable. Well done!
gpt_feedback_length = 45
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_functions_flow_code_timely_extraction/submissions/Beedrill_18988758.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 2
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_functions_flow_code_timely_extraction.Buizel_20306146.py]
student_code = 
	from bakery import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return ___
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = It appears that you have trouble filling out the `is_morning` function. Remember, morning time is usually considered the time before noon but after dawn. You can use the `is_before_noon` and `is_past_dawn` functions to determine if the given hour falls under morning time. In Python, you can use the `and` operator to combine two condition checks together.
gpt_feedback_length = 56
gpt_score = 0.0
pedal_feedback = It looks like you have unconnected blocks on line 10. Before you run your program, you must make sure that all of your blocks are connected that there are no unfilled holes.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_functions_flow_code_timely_extraction.Darumaka_20596757.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return hour 
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = In your is_morning function, you are simply returning the hour as the result which is incorrect. You should return a boolean value which indicates if the hour is between a certain range (for instance, between 5 and 12, if you consider 5 AM to 12 PM as morning). You can make use of your defined functions is_before_noon and is_past_dawn for this.
gpt_feedback_length = 61
gpt_score = 0.0
pedal_feedback = Your function returned an integer on line 12, even though you defined it to return a boolean. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 4
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 3

[bakery_functions_flow_code_timely_extraction.Elgyem_18650843.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return ___
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = In the `is_morning(hour: int)` function, you've left a blank `___` where the return statement should be. This function needs to return a boolean value based on whether or not the input hour is within the 'morning' time frame. This can be achieved by using the `is_before_noon(hour)` and `is_past_dawn(hour)` functions you have defined above. You might consider using an 'and' statement in your return statement to include both conditions.
gpt_feedback_length = 68
gpt_score = 0.0
pedal_feedback = It looks like you have unconnected blocks on line 10. Before you run your program, you must make sure that all of your blocks are connected that there are no unfilled holes.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 1
instructor_feedback_gpt_clear = 2
instructor_feedback_gpt_jargon = 4
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_functions_flow_code_timely_extraction.Girafarig_19721299.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return is_past_dawn(hour) and is_before_noon(hour)
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = Your code looks correct! It has the appropriate functions (is_before_noon, is_past_dawn, and is_morning), and you've included accurate assert statements to test the function 'is_morning'. The functions are correctly identifying whether a given hour falls in the morning range.
gpt_feedback_length = 38
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_functions_flow_code_timely_extraction/submissions/Girafarig_19721299.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 2
instructor_feedback_pedal_concise = 2
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_functions_flow_code_timely_extraction.Lapras_20074571.py]
student_code = 
	from bakery import assert_equal
	
	def is_morning(hour: int) -> bool:
	    def is_before_noon(hour: int) -> bool:
	    return hour <= 12    
	    def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	
	
	
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = It seems like there's a bit of your code missing. You have two nested functions 'is_before_noon' and 'is_past_dawn', but you're not calling these functions anywhere, specifically within the 'is_morning' function. Moreover, proper use of indentation is crucial in Python. The return statements under 'is_before_noon' and 'is_past_dawn' functions should be indented correctly. Also, you need to combine these two inspections to correctly determine if it is morning.
gpt_feedback_length = 66
gpt_score = 0.0
pedal_feedback = Bad indentation on line 5 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 5 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_functions_flow_code_timely_extraction/submissions/Lapras_20074571.py</code>
	<pre class='pedal-python-code python'><code>    return hour <= 12    
	    ^</code></pre>
	</div>
	Expected an indented block after function definition on line 4.
	Suggestion: Check line 5, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 57
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 2
instructor_feedback_pedal_concise = 2
instructor_feedback_pedal_clear = 2
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_functions_flow_code_timely_extraction.Liepard_19874187.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return is_past_dawn(hour) and is_before_noon(hour)
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = Your logic seems to be fine and your methods are working as intended. However, I suggest adding some comments to your code to make it more readable. This is not necessary but it helps in understanding the code better. Good job!
gpt_feedback_length = 41
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_functions_flow_code_timely_extraction/submissions/Liepard_19874187.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 2
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_functions_flow_code_timely_extraction.Nosepass_19326157.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return is_past_dawn or is_before_noon
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = It looks like there's a minor issue with your `is_morning` function. You're trying to use `or` to combine your `is_past_dawn` and `is_before_noon` functions, but you need to call these functions with a parameter. Update these to `is_past_dawn(hour)` and `is_before_noon(hour)`.
gpt_feedback_length = 39
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>hour</code> was given a value on line 9, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 3

[bakery_functions_flow_code_timely_extraction.Nuzleaf_25659450.py]
student_code = 
	from bakery import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return is_before_noon or is_past_dawn
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = In the function is_morning, you are returning the functions is_before_noon and is_past_dawn themselves, instead of their return values for the input hour. You should call these functions with hour as the argument. Remember to use function invocation with ( ) to execute it and get the return value in Python.
gpt_feedback_length = 50
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>hour</code> was given a value on line 9, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 4
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 3

[bakery_if_patterns_make_pig_latin]
description = Define a function `make_pig_latin` that consumes a word (a string) and converts it to actual pig latin (also a string). If the first letter of the word is a vowel, just return that word with `"ay"` added to the end. Otherwise, take the first character of the word and move it to the end of the string, and *then* add `"ay"` to the end. Do not worry about capitalization. If the empty string is given, return `"ay"`.

[bakery_if_patterns_make_pig_latin.Beedrill_21205343.py]
student_code = 
	def make_pig_latin(word: str) -> str:
	    if word[0].lower() in "aeiou":
	        return word + "ay"
	    else:
	        return word[1:] + word[0] + "ay"
	
	print("TEST PASSED")
	print("TEST PASSED")
	print("TEST PASSED")
gpt_feedback = You have a good start on the 'make_pig_latin' function, but I noticed that you're missing a couple things. First, your function doesn't handle empty strings correctly yet. It's generally a good idea to include a check at the start of your function to return an appropriate default value if the input is empty. Second, I didn't see any tests for your function. It's a good programming practice to write tests to make sure your function behaves as expected.
gpt_feedback_length = 78
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>make_pig_latin</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 1
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 2
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 3

[bakery_if_patterns_make_pig_latin.Buizel_22898628.py]
student_code = 
	from cisc108 import assert_equal
	
	def make_pig_latin(word: str) -> str:
	    if word[0] in "AEIOUaeiou"
	        return word + "ay"
gpt_feedback = It seems like you're missing a colon at the end of your if statement. In Python, colon ':' is used to signify the beginning of an indented block section. Fix this by adding a colon after your conditional expression.
gpt_feedback_length = 39
gpt_score = 0.0
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Buizel_22898628.py</code>
	<pre class='pedal-python-code python'><code>    if word[0] in "AEIOUaeiou"
	                              ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 68
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 2
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 5
instructor_feedback_pedal_sentiment = 4

[bakery_if_patterns_make_pig_latin.Darumaka_23539066.py]
student_code = 
	vowel=a
	
	def make_pig_latin (word:str)->str:
	    if word [:0] vowel
	    return word+"ay"
	#else:
	#    return wor
gpt_feedback = There seems to be a couple of errors in your code. Firstly, you're trying to check if the first character of the word is a vowel, but your condition after the 'if' statement is incomplete. You could use the 'in' operator to check if the character is in a group of characters (e.g., 'aeiou'). Secondly, when referencing your variable 'vowel', it should be in quotes ('a'), or you might have meant to define a string containing all vowel character. Lastly, your 'else' clause is commented out and incomplete, you would need this clause to handle when the word does not start with a vowel. A common convention in Pig Latin rules is to move the starting consonant cluster to the end of the word and adding 'ay'.
gpt_feedback_length = 127
gpt_score = 0.0
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Darumaka_23539066.py</code>
	<pre class='pedal-python-code python'><code>    if word [:0] vowel
	                 ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 55
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 1
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 4
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 2
instructor_feedback_pedal_concise = 2
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 5
instructor_feedback_pedal_sentiment = 3

[bakery_if_patterns_make_pig_latin.Elgyem_20565700.py]
student_code = 
	from cisc108 import assert_equal
	def make_pig_latin(word:str)->str:
	     if word[0].lower()in "aeiou"
	        return word+"ay"
	    else
	        return word[1:]+word[0]+"ay"
	        
	assert_equal(make_pig_latin(word),ordway)
gpt_feedback = You've missed colon ':' at the end of your 'if' and 'else' statements. Python needs these to define the scope of these statements. Also, you are passing variables (word and ordway) to your assert_equal function that haven't been defined. Remember to define and assign values to your variables before using them! In your specific case, you probably meant to pass the actual words as strings, and not the variable names. Lastly, 'word[1:]+word[0]+'ay'' is not correct for transforming a word into pig latin. In Pig Latin, you move the first consonant (or consonant cluster) to the end of the word and add 'ay'. Your code would only work for words that start with a single consonant.
gpt_feedback_length = 115
gpt_score = 0.0
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Elgyem_20565700.py</code>
	<pre class='pedal-python-code python'><code>     if word[0].lower()in "aeiou"
	                                 ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 71
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 1
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 4
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 2
instructor_feedback_pedal_concise = 2
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 5
instructor_feedback_pedal_sentiment = 3

[bakery_if_patterns_make_pig_latin.Girafarig_21526564.py]
student_code = 
	from cisc108 import assert_equal
	
	def make_pig_latin(word: str) -> str:
	    if word[0] in 'aeiou':
	        return word + 'ay'
	    return word[1:] + word[0] + 'ay'
	
	assert_equal(make_pig_latin("hello"), "elloay")
	assert_equal(make_pig_latin("arugula"), "arugulaay")
	assert_equal(make_pig_latin("potato"), "otatopay")
	assert_equal(make_pig_latin("green"), "reengay")
gpt_feedback = Your pig latin code implementation seems to be working correctly for words beginning with a consonant. However, your Pig Latin rules might be slightly off for words that begin with a vowel. In traditional pig latin, words that begin with a vowel should have 'way' appended to the end instead of just 'ay'. So 'arugula' would become 'arugulaway' not 'arugulaay'. You might want to adjust your code to include an additional rule for words beginning with a vowel.
gpt_feedback_length = 78
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Girafarig_21526564.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 2
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 2
instructor_feedback_pedal_concise = 2
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 5
instructor_feedback_pedal_sentiment = 3

[bakery_if_patterns_make_pig_latin.Lapras_21931235.py]
student_code = 
	from bakery import assert_equal
	def make_pig_latin(Word:str)->str:
	    if Word[0] in "aeiouAEIOU":
	        pig_latin = Word + "ay"
	    elif Word[0] not in "aeiouAEIOU" and "":
	        pig_latin = Word[1:] + Word[0] +"ay"
	    else:
	            pig_latin = "ay"
	    return pig_latin
	
	assert_equal(make_pig_latin("Fiammetta"), "iamettaFay")       
	assert_equal(make_pig_latin(""), "ay")
	assert_equal(make_pig_latin("Exusiai"), "Exusiaiay")
gpt_feedback = Your code is almost correct, there are just a couple of minor tweaks needed. Firstly, as per standard Pig Latin rules, if a word starts with a consonant, the consonant is moved to the end of the word before 'ay' is added, regardless of the subsequent letters in the word. The line `elif Word[0] not in "aeiouAEIOU" and ""` seems to include an additional and operator with an empty string. This is not adding any logical check and might be causing confusion. For handling empty string input, you could directly check if the word is empty at the start of your function.
gpt_feedback_length = 102
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	An IndexError occurred:
	
	<pre class='pedal-exception'>String index out of range</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Lapras_21931235.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(make_pig_latin(""), "ay")
	             ^^^^^^^^^^^^^^^^^^</code></pre>
	
	Line 3 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Lapras_21931235.py</code> in <code class='pedal-frame'>make_pig_latin</code>
	<pre class='pedal-python-code python'><code>    if Word[0] in "aeiouAEIOU":
	       ^^^^^^^</code></pre>
	</div>
	An IndexError means that you indexed past the end of a string or a list.  For example, if you access index 5 in a list with 3 items.
	
	Suggestion: Remember that the first position in a list or string is 0. Often, you will be off by just one index position, so check your math. Also, make sure the list or string has the right value.
pedal_feedback_length = 124
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 2
instructor_feedback_pedal_concise = 2
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 5
instructor_feedback_pedal_sentiment = 3

[bakery_if_patterns_make_pig_latin.Liepard_21631305.py]
student_code = 
	from cisc108 import assert_equal
	
	def make_pig_latin(word: str) -> str:
	    if word[0] in "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ":
	        return word + "ay"
gpt_feedback = Your function for converting a word into pig Latin is a good start, but it's not yet correct. The logic in pig Latin conversion is that you move the first consonant or consonant cluster of an English word to the end of the word and suffixes an 'ay'. In the case where the word starts with a vowel, 'ay' is simply added to the end. You can check if the first letter is a vowel and create a separate condition for when it's a consonant.
gpt_feedback_length = 85
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 1
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 2
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 3

[bakery_if_patterns_make_pig_latin.Nosepass_22110513.py]
student_code = 
	from cisc108 import assert_equal
	
	def make_pig_latin(word: str)->str:
	    vowels = ["A","E","I","O","U"]
	    if not word:
	        return "ay"
	    elif word[0].upper() in vowels:
	        return word + "ay"
	    return word[1:] + word[0] + "ay"
	
	assertequal(make_pig_latin(""),"ay")
	assertequal(make_pig_latin("effort"),"effortay")
	assertequal(make_pig_latin("make"),"akemay")
	assertequal(make_pig_latin("word"),"ordway")
	assertequal(make_pig_latin("award"),"awarday")
gpt_feedback = Looks like you're doing good thus far, however, there's a small typo in your assert_equal function calls. You wrote 'assertequal' instead of 'assert_equal'. Remember, Python is case sensitive and we need to use the correct function name.
gpt_feedback_length = 37
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>assertequal</code> was used on line 11, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 2
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 3

[bakery_if_patterns_make_pig_latin.Nuzleaf_27538944.py]
student_code = 
	from cisc108 import assert_equal
	
	def make_pig_latin(word:str)->str:
	    if word==""
	        return "ay"
	    elif word[0] in "aeiou":
	        return word+"ay"
	    else:
	        return word[1:]+word[0]+"ay"
gpt_feedback = It seems there is a small syntax error in your code. In Python, conditional statements like 'if' and 'elif' need a colon (:) at the end of the line before the indented body. Please add a colon at the end of the line with 'if word==""'.
gpt_feedback_length = 46
gpt_score = 0.0
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Nuzleaf_27538944.py</code>
	<pre class='pedal-python-code python'><code>    if word==""
	               ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 51
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 4
instructor_feedback_pedal_concise = 2
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_intro_programs_code_try_blockpy]
description = Hello, and welcome to BlockPy! This tool will let you write and run  Python code.
	
	Below, you can see the code editor where there is already a bit of code.
	
	Click the green "Run" button to see the result of running your  code in the "Console" and "Feedback" areas.
	
	When you see the green "Complete" box, you've completed this problem!

[bakery_intro_programs_code_try_blockpy.Beedrill_15803943.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Your print statement is correct and will print 'Welcome to BlockPy!' to the screen.
gpt_feedback_length = 14
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 4
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Buizel_16401118.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Your print statement is correct and will output the string 'Welcome to BlockPy!' to the console. Good job!
gpt_feedback_length = 18
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Darumaka_16967377.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Your print statement looks good! It should display the message 'Welcome to BlockPy!' on the screen.
gpt_feedback_length = 16
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Elgyem_15701933.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Your print statement is correct and it should display 'Welcome to BlockPy!' when executed. Remember, the print() function in Python sends specified message to the screen. It is often used for debugging purposes.
gpt_feedback_length = 33
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Girafarig_16114772.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Your 'print' statement is correct. It will print 'Welcome to BlockPy!' as output. This is a good way to check if your program is working because it will output something you can see. Remember you can print any string, just make sure it's enclosed in quotes.
gpt_feedback_length = 46
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 4
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Lapras_16280492.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Your code is correct and it will print the string 'Welcome to BlockPy!' when executed. Good job on using the print function correctly.
gpt_feedback_length = 23
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Liepard_16523595.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Great start! You have successfully printed a string in Python. Keep practicing!
gpt_feedback_length = 12
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Nosepass_15790367.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Your print statement looks good. It is an excellent way to output information to the console in Python. Keep going!
gpt_feedback_length = 20
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Nuzleaf_22476432.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Your code is correct and will print out the string "Welcome to BlockPy!". Remember, the print() function in Python outputs whatever is provided in the parentheses to the console.
gpt_feedback_length = 29
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_nesting_list_dataclasses_code_good_job]
description = The dataclass `Job` is defined below with the fields `title` (str), `salary` (int), `available` (boolean), and `company` (str).
	
	Define a function `best_job` that consumes a list of jobs and returns the `Job` with the highest `salary` that is `available`. If no jobs are available, then return the default `UNEMPLOYED` job instead.
	
	You will need to unit test your code a sufficient number of times.
	
	**HINT**: Define a helper function to filter out the unavailable jobs BEFORE you determine the highest salary `Job`. An `if` statement used as a Defensive Guard will be very effective for returning the appropriate value in the case where there are no available guards. Having two helper functions (one to filter available jobs, and one to determine the highest salary) in addition to the main `best_job` function makes this a lot easier to keep track of everything.

[bakery_nesting_list_dataclasses_code_good_job.Beedrill_31352318.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def best_job(jobs: [Job]) -> Job:
	    if not [job for job in jobs if job.available]:
	        return UNEMPLOYED
	    return max([job for job in jobs if job.available], key=lambda job: job.salary)
gpt_feedback = The code looks good! The usage of a dataclass for the `Job` object is a great way to handle the data. The `best_job` function also seems to correctly return the job with the maximum salary from the given available jobs. But please make sure you're testing your function with some test data to ensure it works as expected.
gpt_feedback_length = 58
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 2, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 2
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_nesting_list_dataclasses_code_good_job.Buizel_31739575.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
gpt_feedback = Your class definition and instance creation seem fine. However, the 'assert_equal' import from 'bakery' is incorrect. Python does not have a built-in 'bakery' module. If you want to assert equality for testing, you can use the 'assert' keyword in Python or the 'assertEquals' method if you're using unittest module.
gpt_feedback_length = 49
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 2, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 4
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_nesting_list_dataclasses_code_good_job.Darumaka_31747902.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def available(avail:[Job])->bool:
	    taking = []
	    for avai in avail:
	        if avail.available is True:
	            taking.append(avai)
	    return False
	
	Job1 = [Job("banker", 5, True, "PNC")]
	assert_equal(available(Job1), [Job("banker", 5, True, "PNC")])
gpt_feedback = There are a few errors in your code. Firstly, you should loop over individual 'Job' objects not 'avail'. Secondly, your function always returns False, it should return 'taking' instead. Lastly in you assertion, you should check for equality with a list of Job objects not a single Job object.
gpt_feedback_length = 49
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>taking</code> was given a value on line 16, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_nesting_list_dataclasses_code_good_job.Elgyem_30552172.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	def can(have:list[Job])->bool:
	    new_list=[]
	    for h in have:
	        if h.available==True:
	            new_list.append(h)
	    return new_list
	
	def highest(
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
gpt_feedback = It seems like you started to define a function named 'highest' but didn't complete it. Also, in your 'can' function you're returning a list of jobs but the return type is set to 'bool'. Make sure to define what the 'highest' function does and correct the return type of 'can' function.
gpt_feedback_length = 51
gpt_score = 0.0
pedal_feedback = Bad syntax on line 18.
	
	The traceback was:
	<div class='pedal-traceback'>Line 18 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_nesting_list_dataclasses_code_good_job/submissions/Elgyem_30552172.py</code>
	<pre class='pedal-python-code python'><code>def highest(
	           ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 18, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 45
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 4
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 2
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_nesting_list_dataclasses_code_good_job.Girafarig_31362083.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def best_job(jobs: list[Job]) -> Job:
	    greatest_job = UNEMPLOYED
	    for job in jobs:
	        if job.available:
	            if job.salary > greatest_job.salary:
	                greatest_job = job
	    return greatest_job
	
	
	painter = Job("Painter", 5000, True, "Painers Inc.")
	seamstress = Job("Seamstress", 4000, False, "Sewing and Strings")
	server = Job("waiter", 3500, False, "Bob's")
	
	assert_equal(best_job([painter, seamstress, waiter]), 8500)
	assert_equal(best_job([waiter]), UNEMPLOYED)
	assert_equal(best_job([painter]), 5000)
gpt_feedback = There are a few things that need correcting in your code:
	
	1. The 'waiter' job you've defined is named 'server', but you're referring to it as 'waiter' when passing it in the assert_equal function. The names should match.
	
	2. In your first assert_equal function, instead of comparing the output with the number 8500, you should compare it with the Job instance that has the highest salary and is available. The result should be the Job object itself, not the salary.
	
	3. In your last assert_equal function, you�re comparing the best_job function result with the salary of the painter job, you should compare the result with the instance of the job itself as your 'best_job' function returns a Job instance.
	
	Try fixing these issues and run the code again!
gpt_feedback_length = 124
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>waiter</code> was used on line 26, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 1
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 4
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_nesting_list_dataclasses_code_good_job.Lapras_30790908.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def best_job(jobs:[Job])-> Job:
	    greatest_job = UNEMPLOYED.salary
	    for job in jobs:
	        if job.salary > greatest_job:
	            if job.available:
	                greatest_job = job.salary
	    return greatest_job
	
	jobslist = [Job('Legend', 0, False, 'Earth'),
	            Job('Garbageman', 30_000, True, 'City'),
	            Job('Lawyer', 400_000, False, 'City'),
	            Job('Plumber', 75_000, True, 'City')]
	assert_equal(best_job(jobslist), 75_000)
	assert_equal(best_job([]), 0)
	assert_equalassert_equal(best_job(jobslist[:-1]), 30_000)
gpt_feedback = You seem to be returning the salary of the best job instead of the job itself. In the line `greatest_job = job.salary`, job.salary is just the numeric salary part of the job, not the job object. Therefore, your function currently returns a number instead of a Job object. Also, assign the full job object to `greatest_job` whenever a job with a higher salary is found, and return `greatest_job` at the end of your function. Then, when you do comparisons, check against `greatest_job.salary` instead of `greatest_job`.
gpt_feedback_length = 85
gpt_score = 0.0
pedal_feedback = Your function returned an integer on line 25, even though you defined it to return A Job. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 1
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 3

[bakery_nesting_list_dataclasses_code_good_job.Liepard_31859101.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def best_job(jobs: list[Job]) -> Job:
	    highestPay = 0
	    jobTitle = ""
	    for job in jobs:
	        if job.available == False:
	            if job.salary > highestPay:
	                highestPay = job.salary
	                jobTitle = job.title
	    return jobTitle
gpt_feedback = In your code, you're iterating over the jobs and correctly checking if the job is unavailable before considering its salary. However, there are a couple issues with your code.
	
	1. You're returning the title of the job instead of the job object itself. The function signature indicates that a Job object should be returned, not a string.
	
	2. Additionally, your if condition currently excludes all available jobs. It looks like you want to find the highest-paying available job, so you should actually be checking if job.available is True.
	
	Try to fix these errors and run the code again.
gpt_feedback_length = 95
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 2, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 1
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_nesting_list_dataclasses_code_good_job.Nosepass_31444935.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	def filter_un(Jobs: list[Job])->list[Job]:
	    avalible_jobs = []
	    for job in Jobs:
	        if job.avalible:
	            avalible_jobs.append(job)
	    return avalible_jobs
	
	def best_job(Jobs: list[Job])->Job:
	    largest_salary = 0
	    filtered_jobs = filter_un(Jobs)
	    
	    if not filtered_jobs:
	        return Job("Unemployed", 0, True, "None")
	    
	    best_job = filtered_jobs[0]
	    for job in Jobs:
	        if job.salary > best_job.slary:
	            best_job = job
	    return best_job
	
	assert_equal(best_job([Job("Unemployed", 0, True, "None"),Job("Software Developer", 500000, False, "Google"),Job("TA",5,True,"Uni")]),Job("TA",5,True,"Uni"))
	assert_equal(best_job([Job("Unemployed", 0, True, "None"),Job("Software Developer", 500000, True, "Google"),Job("TA",5,True,"Uni")]),Job("Software Developer", 500000, True, "Google"))
	assert_equal(best_job([Job("Unemployed", 0, False, "None"),Job("Software Developer", 500000, False, "Google"),Job("TA",5,True,"Uni")]),Job("Unemployed", 0, True, "None"))
gpt_feedback = The code contains a few spelling errors. In the `filter_un` function, `avalible` should be spelled `available`. Similarly, in the `best_job` function, `slary` should be spelled `salary`. Fixing these typos should eliminate any name errors and help your function perform as expected.
gpt_feedback_length = 41
gpt_score = 0.0
pedal_feedback = Do not remove or alter the starting code that we gave you. You may need to check your history or reset the problem.
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_nesting_list_dataclasses_code_good_job.Nuzleaf_34424269.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	def available_jobs(jobs:list[Job])->list[job]:
	    avail_jobs=[]
	    for job in jobs:
	        if job.available:
	            avail_jobs.append(job)
	    return avail_jobs
	
	def highest_salary(jobs:list[Job])->int:
	    maximum=jobs[0].salary
	    for job in jobs:
	        if maximum<job.salary:
	            maximum=job.salary
	    return maximum
	
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def best_job(jobs:list[Job])->Job:
	    x=available_jobs(jobs)
	    if not x:
	        return UNEMPLOYED
	    y=highest_salary(x)
	    for job in jobs:
	        if job.salary==maximum:
	            return job   
	    
	
	list1:[Job("Dancer", 5000, True, "None"),Job("Driver", 200, True, "None")]
	list2:[Job("Painter",0, True, "None"),Job("Explorer", 200, False, "None")]
	list3:[Job("Hooper", 1000, False, "None"),Job("Scientist", 1200, False, "None")]
	
	assert_equal(best_job(list1), Job("Dancer", 5000, True, "None"))
	assert_equal(best_job(list2), Job("Painter",0, True, "None"))
	assert_equal(best_job(list3), UNEMPLOYED = Job("Unemployed", 0, True, "None"))
gpt_feedback = Your code has an issue in one of your test cases. Specifically, you're trying to assign a value to the constant UNEMPLOYED in the last assert_equal statement. You should remove the assignment operation (=) and directly compare the best_job(list3) with your UNEMPLOYED instance of Job class. Your corrected line should be: assert_equal(best_job(list3), Job("Unemployed", 0, True, "None")). Also, ensure that you initialize your lists properly. The syntax you used (list1:[Job...]) is incorrect. You should use the equal sign (=) instead of colon (:). So, the corrected line would be: list1 = [Job("Dancer", 5000, True, "None"),Job("Driver", 200, True, "None")]
gpt_feedback_length = 97
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>job</code> was used on line 11, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_structures_lists_code_book_list]
description = Create a list of 3 strings that represent the names of your favorite books and store them in a variable. Print this variable.

[bakery_structures_lists_code_book_list.Beedrill_23099060.py]
student_code = 
	books = ["the why axis", "I haven't read many books", "In a while"]
	
	print(books)
gpt_feedback = Your code is correct. It creates the 'books' list and prints the entire list out. The list contains three elements: 'the why axis', 'I haven't read many books', and 'In a while'. If you want to do more with the list such as adding items, removing items, or accessing a specific item, you can use Python list methods such as append(), remove(), or square brackets [index] to get a specific item using its index.
gpt_feedback_length = 74
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_book_list.Buizel_24404096.py]
student_code = 
	book = ["dog" "dog" "doggy"]
gpt_feedback = It seems you are trying to create a list of strings. In Python, individual items in a list should be separated by commas. Try revising your code to: `book = ['dog', 'dog', 'doggy']`.
gpt_feedback_length = 33
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>book</code> was given a value on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_structures_lists_code_book_list.Darumaka_24887472.py]
student_code = 
	books=["1", "2", "3"]
	print(books)
gpt_feedback = Your code is correct. It defines a list of strings named 'books' and then prints the list. Just bear in mind that if you intended the list to contain number, then you should not enclose them in quotes, as this will define them as strings not integers. So, if they are supposed to be numbers, you should define your list this way: books=[1, 2, 3].
gpt_feedback_length = 65
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_book_list.Elgyem_22869578.py]
student_code = 
	# a list of 3 strings that represent the names of your favorite books 
	books=[Island,Firefly_Lane,Longevity]
	print(books)
gpt_feedback = It seems like you're trying to create a list of strings. However, in Python, all strings should be enclosed in quotes (either single or double quotes will do). Try creating your list again, but this time, ensure all your book titles are in quotes.
gpt_feedback_length = 44
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>Island</code> was used on line 2, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 4
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 4
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_structures_lists_code_book_list.Girafarig_24550668.py]
student_code = 
	books = ["title 1", "title 2", "title 3"]
gpt_feedback = Your list declaration seems fine, but you haven't done anything with it yet. Do you want to perform any specific operations (such as addition, removal, or display of items) on the list? Please specify your requirements.
gpt_feedback_length = 36
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>books</code> was given a value on line 2, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 4
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_structures_lists_code_book_list.Lapras_23924730.py]
student_code = 
	Books = ['Harry Potter', 'Origami Yoda', 'Oregairu']
	print
gpt_feedback = It seems like you are trying to print the list of books. To do that, you should use a 'print' function with your list as its argument, like so: 'print(Books)'. Remember to always finish your statements in Python.
gpt_feedback_length = 38
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>Books</code> was given a value on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 4
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_structures_lists_code_book_list.Liepard_24011306.py]
student_code = 
	books = ["Harry Potter", "Lord of The Rings", "The Witcher"]
	print(book)
gpt_feedback = It seems like you're trying to print a variable 'book' which is not defined. As you have a list named 'books', did you mean to print that or one of its elements?
gpt_feedback_length = 32
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>book</code> was used on line 2, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 4
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_structures_lists_code_book_list.Nosepass_23407576.py]
student_code = 
	books = ['farquad','tichi','bro the book']
	print(books)
gpt_feedback = Your code already works well! It correctly declares a list of books and then prints the list. If you are looking to improve it or add more complexity, think about what else you might want to do with books. Maybe you could write a function to search for a particular book in your list, add a book to your list, or remove a book. You might also want to implement some error checking to make sure that the user is interacting with the list in a valid way.
gpt_feedback_length = 88
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_book_list.Nuzleaf_28121708.py]
student_code = 
	x=["Stella Luna", "Hunger Games", "A Game of Thrones"]
	print(x)
gpt_feedback = Great job! Your code correctly creates a list called 'x' and prints it out. This is a good start if you want to work with lists in Python.
gpt_feedback_length = 28
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness]
description = Print an empty list literal value. That's it, just directly print the empty list literal value.

[bakery_structures_lists_code_emptiness.Beedrill_23099121.py]
student_code = 
	print([])
gpt_feedback = Your code successfully prints an empty list. If you want to print a list with some elements in it, you can add them in the square brackets, separated by commas. Example: print(['apple', 'orange', 'banana']).
gpt_feedback_length = 34
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness.Buizel_24404292.py]
student_code = 
	empty = []
	print(empty)
gpt_feedback = Your code correctly creates an empty list and prints it. This is a great start to understanding lists in Python!
gpt_feedback_length = 20
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness.Darumaka_24887664.py]
student_code = 
	empty=[]
	print(empty)
gpt_feedback = Good job! Your code is correctly defining an empty list and printing it. In Python, an empty list can be created with empty square brackets, like you did. When you print it, it will appear as [].
gpt_feedback_length = 37
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness.Girafarig_24550838.py]
student_code = 
	print([])
gpt_feedback = Your code `print([])` is correctly printing an empty list. But remember, if you want to do some operations with a list, you need to fill it with some elements first. You can do that either during list initialization like `my_list = [1, 2, 3]` or by appending elements later like `my_list.append(4)`.
gpt_feedback_length = 51
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness.Lapras_23924826.py]
student_code = 
	empty = []
	print(empty)
gpt_feedback = Your code successfully creates an empty list and prints it. Good job!
gpt_feedback_length = 12
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness.Liepard_24011392.py]
student_code = 
	print([])
gpt_feedback = Your code currently prints an empty list, which is displayed as []. If you want to put some elements in the list or perform operations on a list, you should define it first then print it.
gpt_feedback_length = 36
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness.Nosepass_23407797.py]
student_code = 
	List = []
	print(List)
gpt_feedback = Your code successfully creates an empty list and prints it out. However, since this is an Python introductory course, do you need help with more complex list operations such as adding elements, removing elements, or accessing elements of a list?
gpt_feedback_length = 40
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness.Nuzleaf_28121803.py]
student_code = 
	print([])
gpt_feedback = Your code correctly prints an empty list. If you meant to print the contents of a list, be sure to fill it with some elements first. For example, `print([1, 2, 3])` would print a list with numbers 1, 2, and 3.
gpt_feedback_length = 41
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 4
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[global]
instructor = Instructor
tester = Brend
gpt_model = gpt-4-0613
gpt_prompt = [
	  {
	    "feedback": [
	      [
	        {
	          "role": "system",
	          "content": "You are an intelligent tutor for a introductory computer science course in Python. You never give answers but do give helpful tips to guide students with their code."
	        },
	        {
	          "role": "user",
	          "content": "{{STUDENT_CODE_HERE}}"
	        }
	      ],
	      {
	        "name": "add_code_feedback",
	        "description": "Adds feedback on the code for the student to view.",
	        "parameters": {
	          "type": "object",
	          "properties": {
	            "feedback": {
	              "type": "string",
	              "description": "Helpful tips to guide a student with their problematic code."
	            },
	            "is_error_present": {
	              "type": "boolean",
	              "description": "If there is a problem with the code, this parameter is true."
	            }
	          },
	          "required": [
	            "feedback",
	            "is_error_present"
	          ]
	        }
	      },
	      1.0,
	      1.0
	    ]
	  },
	  "<function get_prompts_getter.<locals>.get_default_prompts.<locals>.process_prompts at 0x00000275064BCB80>"
	]
gpt_prompt_approximate_length = 409

[bakery_advanced_plotting_code_basic_scatter]
description = Let us return to the salary data we saw a few problems ago. Previously, we looked at the distribution of the `mean_salary` data. Now we will compare that data with the `median_salary` data and then the `members` data to see if there are any correlations. Create *two* visualizations:

	1. The first should show the relationship between `mean_salary` (x-axis) and `median_salary` (y-axis)
	2. The second should show the relationship between `mean_salary` (x-axis) and `members` (y-axis)

	Make sure you give meaningful labels to the axes and a title.

	You are provided the following code in the `bakery_salary.py` file. Assume `raw_salaries.csv` is a valid CSV file:

	```python
	from dataclasses import dataclass

	@dataclass
	class Industry:
	    """
	    Information about an individual industry.

	    Attributes:
	        name: The name of the industry
	        members: The number of people employed in the industry.
	        mean_salary: The average salary of people in this industry.
	        median_salary: The median salary of people in this industry (more robust to outliers).
	    """
	    name: str
	    members: int
	    mean_salary: int
	    median_salary: int

	industries = []
	with open('raw_salaries.csv') as salary_file:
	    for line in salary_file:
	        name, members, mean, median = line.split("|")
	        industries.append(Industry(
	            name, int(members), int(mean), int(median)
	        ))
	```

[bakery_advanced_plotting_code_basic_scatter.Beedrill_37084628.py]
student_code =
	from bakery_salary import industries
	import matplotlib.pyplot as plt

	mean_salaries = [industry.mean_salary for industry in industries]
	median_salaries = [industry.median_salary for industry in industries]
	members_list = [industry.members for industry in industries]

	plt.scatter(mean_salaries, median_salaries, label="Mean vs Median Salary")
	plt.scatter(mean_salaries, members, label="Mean Salaries vs Member Count")
	plt.xlabel("Mean Salary")
	plt.legend()
	plt.show()
gpt_feedback = It seems like you've made a mistake when trying to create your second scatter plot. You've defined 'members_list' but you're using 'members' which is not defined in the code. You should use 'members_list' instead.
gpt_feedback_length = 34
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>members</code> was used on line 9, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 1

[bakery_advanced_plotting_code_basic_scatter.Buizel_37377473.py]
student_code =
	from bakery_salary import industries

	import matplotlib.pyplot as plt


	mean_salary = [50, 90, 150, 200, 250]

	median_salary = [40, 80, 120, 180, 240]


	plt.scatter(mean_salary, median_salary)

	plt.xlabel('Mean Salary')

	plt.ylabel('Median Salary')

	plt.title('Relationship between Mean and Median Salary')

	plt.show()
gpt_feedback = Your code seems well-written and follows correct syntax. However, I'm noticing that you imported a module named "from bakery_salary import industries", but didn't actually use it in your code. You might want to consider removing or using this import to clean up your code.
gpt_feedback_length = 44
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>industries</code> was given a value on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 2

[bakery_advanced_plotting_code_basic_scatter.Elgyem_36169335.py]
student_code =
	from bakery_salary import industries
	import matplotlib.pyplot as plt

	mean=[]
	median=[]
	number=[]
	for industry in industries:
	    mean.append(industry.mean_salary)
	    median.append(industry.median_salary)
	    number.append(industry.members)

	plt.scatter(mean,median)
	plt.xlablel(mean_salary)
	plt.ylablel(members)
	plt.show()

	plt.scatter(mean,number)
	plt.xlablel=(mean_salary)
	plt.ylablel=(median_salary)
	plt.show()
gpt_feedback = There are two main problems. Firstly, you have made typos in your code you wrote 'xlablel' and 'ylablel' instead of 'xlabel' and 'ylabel' respectively. So, replace 'xlablel' with 'xlabel', and 'ylablel' with 'ylabel'. Secondly, 'plt.xlabel' and 'plt.ylabel' are functions - they aren't supposed to be assigned values. You should pass the labels as arguments to these functions. For example, instead of 'plt.xlabel=(mean_salary)', it should be 'plt.xlabel('Mean Salary')'. You should apply the similar changes to ylabel as well.
gpt_feedback_length = 77
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>mean_salary</code> was used on line 13, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 1

[bakery_advanced_plotting_code_basic_scatter.Girafarig_36476870.py]
student_code =
	from bakery_salary import industries

	mean_salaries = []
	median_salaries = []
	for industry in industries:
	    mean_salaries.append(industry.mean_salary)
	    median_salaries.append(industry.median_salaries)

	plt.scatter(mean_salaries, median_salaries)
	plt.show()

	plt.scatter(median_salaries, mean_salaries)
	plt.show()
gpt_feedback = Your code is mostly correct, but it looks like you might have a minor typo. Instead of `industry.median_salaries`, it should be `industry.median_salary`. Secondly, make sure you import the required matplotlib.pyplot library use `import matplotlib.pyplot as plt` at the beginning of your code if you haven't done so.
gpt_feedback_length = 47
gpt_score = 0.0
pedal_feedback = You have imported the <code class='pedal-name'>plt</code> module, but you did not rename it to <code class='pedal-name'>matplotlib.pyplot</code> using <code>import matplotlib.pyplot as plt</code>.
pedal_feedback_length = 21
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 4
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 3

[bakery_advanced_plotting_code_basic_scatter.Lapras_36250264.py]
student_code =
	from bakery_salary import industries
	import matplotlib.pyplot as plt
	members = []
	mean = []
	median = []
	for industry in industries:
	    members.append(industry.members)
	    mean.append(industry.mean_salary)
	    median.append(industry.median_salary)
	plt.scatter(mean, median)
	plt.title('Mean vs Median')
	plt.ylabel('Median')
	plt.xlabel('Mean')
	plt.show()
	plt.scatter(mean, members)
	plt.title('Mean vs Members')
	plt.ylabel('Members')
	plt.xlabel('Mean')
	plt.show()
gpt_feedback = Your code seems fine but I recommend adding some comments to your code. Comments are a good way to explain what your code does and makes it more readable. Also, if your program is not working as expected, you might want to check and display the values of your lists 'member', 'mean' and 'median' after you append the values from your 'industries' list to them.
gpt_feedback_length = 65
gpt_score = 0.0
pedal_feedback = I ran your code.

	A ModuleNotFoundError occurred:

	<pre class='pedal-exception'>No module named 'bakery_salary'</pre>

	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_advanced_plotting_code_basic_scatter/submissions/Lapras_36250264.py</code>
	<pre class='pedal-python-code python'><code>from bakery_salary import industries
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 3
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 2
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_advanced_plotting_code_basic_scatter.Liepard_36306163.py]
student_code =
	from bakery_salary import industries

	import matplotlib.pyplot as plt

	totalMS = []
	for industry in industries:
	    totalMS.append(industry.mean_salary / 1000)

	plt.hist(totalMS)
	plt.xlabel("Mean Salary ($)")
	plt.ylabel("Industries")
	plt.title("Mean Salary of Industries")
	plt.show()
gpt_feedback = Your code seems good, but it seems unclear how the `mean_salary` property is defined in your `industry` object, as this was not shown in the code snippet. Make sure this property is correctly defined and accessed. Also, note that the pyplot histogram generally displays how often various range of values occur in the dataset (frequency). Therefore, it may be a bit confusing to label the y-axis as 'Industries'. Maybe you wanted to use a different kind of plot like a bar plot?
gpt_feedback_length = 82
gpt_score = 0.0
pedal_feedback = I ran your code.

	A ModuleNotFoundError occurred:

	<pre class='pedal-exception'>No module named 'bakery_salary'</pre>

	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_advanced_plotting_code_basic_scatter/submissions/Liepard_36306163.py</code>
	<pre class='pedal-python-code python'><code>from bakery_salary import industries
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 3
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 2
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_advanced_plotting_code_basic_scatter.Nosepass_36799328.py]
student_code =
	from bakery_salary import industries
	import matplotlib.pyplot as plt

	mean_sal = []
	med_sal = []
	members = []
	for industry in industries:
	    mean_sal.append(industry.mean_salary)
	    med_sal.append(industry.med_sal)
	    members.append(industry.members)

	plt.scatter(mean_sal, med_sal)
	plt.title('Mean and Median Salaries (U.S. DOL 2021)')
	plt.xlabel('Mean Salary')
	plt.ylabel('Median Salary')
	plt.show()

	plt.scatter(mean_sal, Members)
	plt.title('Mean and Memebers Salaries (U.S. DOL 2021)')
	plt.xlabel('Mean Salary')
	plt.ylabel('Number of Members')
	plt.show()
gpt_feedback = Your code is almost correct but there's a small error. Python is case-sensitive, which means 'Members' and 'members' are considered to be two different variables. In the second scatter plot, you are trying to use 'Members' while you should be using 'members'.
gpt_feedback_length = 42
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>Members</code> was used on line 18, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 2

[bakery_advanced_plotting_code_basic_scatter.Nuzleaf_38568583.py]
student_code =
	from bakery_salary import industries
	import matplotlib.pyplot as plt

	mean_salary_list=[]
	for industry in industries:
	    mean_salary_list.append(industry.mean_salary/1000)
	median_salary_list=[]
	for industry in industries:
	    median_salary_list.append(industry.median_salary)
	members_list=[]
	for industry in industries:
	    members_list.append(industry.members)
	plt.scatter(mean_salary_list, median_salary_list)
	plt.xlabel("Mean Salary")
	plt.ylabel("Median Salary")
	plt.title("Mean Salary Compared to Median Salary")
	plt.show
	plt.scatter(mean_salary_list, members)
	plt.xlabel("Mean Salary")
	plt.ylabel("Members")
	plt.title("Mean Salary Compared to Members")
	plt.show
gpt_feedback = It seems like you made a minor oversight when calling the `plt.show` function. Instead of `plt.show`, it should be `plt.show()` as it is a function call. This error is repeated twice in your code. Also, in your second scatter plot, you may have meant to use `members_list` instead of `members`. Anticipate the behavior of your code and revise it accordingly.
gpt_feedback_length = 60
gpt_score = 0.0
pedal_feedback = You have not called the <code>plt.show</code> function, which actually creates the graph.
pedal_feedback_length = 12
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 2
instructor_feedback_pedal_accurate = 2
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_intro_import_code_import_variable]
description = The file `my_second_module.py` is available to be imported into your program, and contains a string variable named `art`. Import the variable from the module, and print its contents.

[bakery_intro_import_code_import_variable.Beedrill_16150346.py]
student_code =
	import art from my_second_module
gpt_feedback = It seems like you're trying to import `art` from `my_second_module`. However, Python uses the `from ... import ...` construct for this. So, your import should be something like `from my_second_module import art`. Also, please make sure `my_second_module` is either a built-in Python module, or it's a script that you created and is in the same directory as your current script.
gpt_feedback_length = 60
gpt_score = 0.0
pedal_feedback = Bad syntax on line 1.

	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_intro_import_code_import_variable/submissions/Beedrill_16150346.py</code>
	<pre class='pedal-python-code python'><code>import art from my_second_module
	           ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 45
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 1
instructor_feedback_pedal_clear = 1
instructor_feedback_pedal_jargon = 5
instructor_feedback_pedal_sentiment = 3

[bakery_intro_import_code_import_variable.Buizel_17811305.py]
student_code =
	from my_second_module.py import art
gpt_feedback = It seems like you're having trouble with importing a module in Python. The correct syntax is `from module_name import something`, and there are no `.py` extensions. In your case, it should be `from my_second_module import art`. Also, please check if `my_second_module` is properly defined and resides in the same directory.
gpt_feedback_length = 50
gpt_score = 0.0
pedal_feedback = You should not have the `.py` part of the filename in your `import` statement. Only use the name of the module on its own!
pedal_feedback_length = 24
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 2

[bakery_intro_import_code_import_variable.Darumaka_17744727.py]
student_code =
	art = """
	⁣          🎈🎈  ☁️
	         🎈🎈🎈
	 ☁️     🎈🎈🎈🎈
	        🎈🎈🎈🎈
	   ☁️    ⁣🎈🎈🎈
	           \|/
	           🏠   ☁️
	   ☁️         ☁️

	🌳🌹🏫🌳🏢🏢_🏢🏢🌳🌳
	print(""")
gpt_feedback = It seems like you're trying to print a string representation of an illustration. However, your print statement is incomplete. You need to pass the string you want to print as an argument to the `print` function. Try `print(art)` assuming 'art' is the variable containing your string.
gpt_feedback_length = 46
gpt_score = 0.0
pedal_feedback = Bad syntax on line 12.

	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_intro_import_code_import_variable/submissions/Darumaka_17744727.py</code>
	<pre class='pedal-python-code python'><code>print(""")
	         ^</code></pre>
	</div>
	Unmatched ')'.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 40
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 1
instructor_feedback_pedal_clear = 1
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_intro_import_code_import_variable.Elgyem_16229137.py]
student_code =
	import file

	print("art",my_second_module.py)
gpt_feedback = It seems like you're trying to import a module and print something from it. However, the way you're trying to do it is incorrect. In Python, to import a module, you would generally do something like 'import module_name' not 'import file'. Moreover, you cannot print a python file like 'print("art",my_second_module.py)'. If you are trying to use a function or a variable from your imported module, you should do it like this: 'print(module_name.variable_name)' or 'module_name.function_name()'.
gpt_feedback_length = 74
gpt_score = 0.0
pedal_feedback = You should not have the `.py` part of the filename in your `import` statement. Only use the name of the module on its own!
pedal_feedback_length = 24
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 2

[bakery_intro_import_code_import_variable.Girafarig_18042275.py]
student_code =
	from my_secon_module import art
	print(art)
gpt_feedback = It seems that you're trying to import a module named 'my_secon_module', but Python cannot find it. The error might be due to a typo, the file not being in the current directory, or the file not existing at all. If 'my_secon_module' is supposed to be a custom module, ensure the spelling is correct and the .py file is located in the same directory as your current script. If it's an external module, make sure it's installed correctly in your Python environment.
gpt_feedback_length = 81
gpt_score = 0.0
pedal_feedback = I ran your code.

	A ModuleNotFoundError occurred:

	<pre class='pedal-exception'>No module named 'my_secon_module'</pre>

	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_intro_import_code_import_variable/submissions/Girafarig_18042275.py</code>
	<pre class='pedal-python-code python'><code>from my_secon_module import art
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 2
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_intro_import_code_import_variable.Lapras_17636639.py]
student_code =
	import my_second_module.py
	print (art)
gpt_feedback = It seems like you are trying to import a custom module in Python. In Python, when importing modules, we don't use the '.py' extension. Try changing your import statement to `import my_second_module`. Further, make sure that you are importing the correct attribute from your module. If 'art' is not defined in 'my_second_module', that could potentially cause an error. If 'art' is the name of a function, it should be called with parentheses like so: art().
gpt_feedback_length = 75
gpt_score = 0.0
pedal_feedback = You should not have the `.py` part of the filename in your `import` statement. Only use the name of the module on its own!
pedal_feedback_length = 24
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 2

[bakery_intro_import_code_import_variable.Liepard_18047518.py]
student_code =
	from my_second_module.py import art
	print(art)
gpt_feedback = In Python, when you want to import a module, it's important to note that you can only import Python files and not the '.py' extension. The correct way to import your module should be:

	from my_second_module import art

	This will import the 'art' variable (or function, or class) from the 'my_second_module' module.
gpt_feedback_length = 51
gpt_score = 0.0
pedal_feedback = You should not have the `.py` part of the filename in your `import` statement. Only use the name of the module on its own!
pedal_feedback_length = 24
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 2

[bakery_intro_import_code_import_variable.Nosepass_16621124.py]
student_code =
	import my_second_module.py
	print(art)
gpt_feedback = When importing modules in Python, you don't need to include the '.py' at the end. Instead, use 'import my_second_module'. After that you can access variables or functions inside that module using 'my_second_module.art' for example.
gpt_feedback_length = 34
gpt_score = 0.0
pedal_feedback = You should not have the `.py` part of the filename in your `import` statement. Only use the name of the module on its own!
pedal_feedback_length = 24
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 2

[bakery_intro_import_code_import_variable.Nuzleaf_22980678.py]
student_code =
	from my_second_module.py import art
	print (art)
gpt_feedback = The Python import syntax appears to be incorrect. We don't add '.py' while importing modules in Python. You should try changing your import statement to `from my_second_module import art` and see if you get the results you're expecting.
gpt_feedback_length = 38
gpt_score = 0.0
pedal_feedback = You should not have the `.py` part of the filename in your `import` statement. Only use the name of the module on its own!
pedal_feedback_length = 24
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 2
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 2

