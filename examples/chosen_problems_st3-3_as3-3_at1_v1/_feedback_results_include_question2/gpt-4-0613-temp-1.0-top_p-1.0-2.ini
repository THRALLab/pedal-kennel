[global]
instructor = Instructor
tester = johna
gpt_model = gpt-4-0613
gpt_prompt = [
	  {
	    "feedback": [
	      [
	        {
	          "role": "system",
	          "content": "You are an intelligent tutor for a introductory computer science course in Python. You never give answers but do give helpful tips to guide students with their code."
	        },
	        {
	          "role": "assistant",
	          "content": "The student was given this programming problem:\nPrint an empty list literal value. That's it, just directly print the empty list literal value."
	        },
	        {
	          "role": "user",
	          "content": "{{STUDENT_CODE_HERE}}"
	        }
	      ],
	      {
	        "name": "add_code_feedback",
	        "description": "Adds feedback on the code for the student to view.",
	        "parameters": {
	          "type": "object",
	          "properties": {
	            "feedback": {
	              "type": "string",
	              "description": "Helpful tips to guide a student with their problematic code."
	            },
	            "is_error_present": {
	              "type": "boolean",
	              "description": "If there is a problem with the code, this parameter is true."
	            }
	          },
	          "required": [
	            "feedback",
	            "is_error_present"
	          ]
	        }
	      },
	      1.0,
	      1.0
	    ]
	  },
	  "<function get_prompts_getter.<locals>.get_default_prompts.<locals>.process_prompts at 0x00000225395FDF80>"
	]
gpt_prompt_approximate_length = 468

[bakery_advanced_plotting_code_basic_scatter]
description = Let us return to the salary data we saw a few problems ago. Previously, we looked at the distribution of the `mean_salary` data. Now we will compare that data with the `median_salary` data and then the `members` data to see if there are any correlations. Create *two* visualizations:
	
	1. The first should show the relationship between `mean_salary` (x-axis) and `median_salary` (y-axis)
	2. The second should show the relationship between `mean_salary` (x-axis) and `members` (y-axis)
	
	Make sure you give meaningful labels to the axes and a title.
	
	You are provided the following code in the `bakery_salary.py` file. Assume `raw_salaries.csv` is a valid CSV file:
	
	```python
	from dataclasses import dataclass
	
	@dataclass
	class Industry:
	    """
	    Information about an individual industry.
	    
	    Attributes:
	        name: The name of the industry
	        members: The number of people employed in the industry.
	        mean_salary: The average salary of people in this industry.
	        median_salary: The median salary of people in this industry (more robust to outliers).
	    """
	    name: str
	    members: int
	    mean_salary: int
	    median_salary: int
	
	industries = []
	with open('raw_salaries.csv') as salary_file:
	    for line in salary_file:
	        name, members, mean, median = line.split("|")
	        industries.append(Industry(
	            name, int(members), int(mean), int(median)
	        ))
	```

[bakery_advanced_plotting_code_basic_scatter.Beedrill_37084628.py]
student_code = 
	from bakery_salary import industries
	import matplotlib.pyplot as plt
	
	mean_salaries = [industry.mean_salary for industry in industries]
	median_salaries = [industry.median_salary for industry in industries]
	members_list = [industry.members for industry in industries]
	
	plt.scatter(mean_salaries, median_salaries, label="Mean vs Median Salary")
	plt.scatter(mean_salaries, members, label="Mean Salaries vs Member Count")
	plt.xlabel("Mean Salary")
	plt.legend()
	plt.show()
gpt_feedback = You've made a good start on your code, but you've mixed up your visualizations. You're attempting to plot two different sets of data on the same scatter plot. This could cause confusion when interpreting the visualizations. Also, the variable `members` in the second scatter plot is undefined and should be `members_list`. I recommend creating separate plots for each visualization and labelling both the x-axis and y-axis in each plot appropriately for clarity. Also, don't forget to give each plot a title.
gpt_feedback_length = 81
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>members</code> was used on line 9, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_advanced_plotting_code_basic_scatter.Buizel_37377473.py]
student_code = 
	from bakery_salary import industries
	
	import matplotlib.pyplot as plt
	
	
	mean_salary = [50, 90, 150, 200, 250]
	
	median_salary = [40, 80, 120, 180, 240]
	
	
	plt.scatter(mean_salary, median_salary)
	
	plt.xlabel('Mean Salary')
	
	plt.ylabel('Median Salary')
	
	plt.title('Relationship between Mean and Median Salary')
	
	plt.show()
gpt_feedback = The student's intention for the code makes sense, but the error comes from the use of their own data instead of the data from the provided data class 'Industry'. The student should extract the 'mean_salary' and 'median_salary' data from the 'industries' list so that it can be visualized on a scatterplot.
gpt_feedback_length = 51
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>industries</code> was given a value on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 2
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_advanced_plotting_code_basic_scatter.Elgyem_36169335.py]
student_code = 
	from bakery_salary import industries
	import matplotlib.pyplot as plt
	
	mean=[]
	median=[]
	number=[]
	for industry in industries:
	    mean.append(industry.mean_salary)
	    median.append(industry.median_salary)
	    number.append(industry.members)
	        
	plt.scatter(mean,median)
	plt.xlablel(mean_salary)
	plt.ylablel(members)
	plt.show()
	
	plt.scatter(mean,number)
	plt.xlablel=(mean_salary)
	plt.ylablel=(median_salary)
	plt.show()
gpt_feedback = You are on the right track, but there are a few errors in your code. First, there's a typo in the calls to `xlabel` and `ylabel` functions where you have called it as `xlablel` and `ylablel`. Fix the method names to 'xlabel' and 'ylabel'.  
	
	Also, when setting the labels, they should be passed as string literals, not bare variable names (unless those are defined variables in your scope, which is not the case here). For example, it should be `plt.xlabel('mean_salary')`. 
	
	Lastly, your y-labels are mismatched with the data you're plotting. In your first plot, y-axis represents median salaries, not members. In your second plot, y-axis represents number of members, not median salaries. Adjust your labels accordingly.
gpt_feedback_length = 117
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>mean_salary</code> was used on line 13, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_advanced_plotting_code_basic_scatter.Girafarig_36476870.py]
student_code = 
	from bakery_salary import industries
	
	mean_salaries = []
	median_salaries = []
	for industry in industries:
	    mean_salaries.append(industry.mean_salary)
	    median_salaries.append(industry.median_salaries)
	
	plt.scatter(mean_salaries, median_salaries)
	plt.show()
	
	plt.scatter(median_salaries, mean_salaries)
	plt.show()
gpt_feedback = Some corrections and additions are need in your code. First, you may have a typo in the `append` method. You used `median_salaries.append(industry.median_salaries)` but it should be `median_salaries.append(industry.median_salary)`. Second, you're asked to create two visualizations but you have one reversed. The second scatter plot should use `industry.members` for the y-axis, rather than `industry.median_salary`. Lastly, remember to add labels and a title to your plots for clarity.
gpt_feedback_length = 65
gpt_score = 0.0
pedal_feedback = You have imported the <code class='pedal-name'>plt</code> module, but you did not rename it to <code class='pedal-name'>matplotlib.pyplot</code> using <code>import matplotlib.pyplot as plt</code>.
pedal_feedback_length = 21
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 2
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_advanced_plotting_code_basic_scatter.Lapras_36250264.py]
student_code = 
	from bakery_salary import industries
	import matplotlib.pyplot as plt
	members = []
	mean = []
	median = []
	for industry in industries:
	    members.append(industry.members)
	    mean.append(industry.mean_salary)
	    median.append(industry.median_salary)
	plt.scatter(mean, median)
	plt.title('Mean vs Median')
	plt.ylabel('Median')
	plt.xlabel('Mean')
	plt.show()
	plt.scatter(mean, members)
	plt.title('Mean vs Members')
	plt.ylabel('Members')
	plt.xlabel('Mean')
	plt.show()
gpt_feedback = Your code seems to be correct. You have correctly created two visualizations that show the desired relationships between 'mean_salary' vs 'median_salary' and 'mean_salary' vs 'members'. Good job with labelling the axes and adding titles to your plots. This makes your charts much more understandable.
gpt_feedback_length = 44
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'bakery_salary'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_advanced_plotting_code_basic_scatter/submissions/Lapras_36250264.py</code>
	<pre class='pedal-python-code python'><code>from bakery_salary import industries
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_advanced_plotting_code_basic_scatter.Liepard_36306163.py]
student_code = 
	from bakery_salary import industries
	
	import matplotlib.pyplot as plt
	
	totalMS = []
	for industry in industries:
	    totalMS.append(industry.mean_salary / 1000)
	    
	plt.hist(totalMS)
	plt.xlabel("Mean Salary ($)")
	plt.ylabel("Industries")
	plt.title("Mean Salary of Industries")
	plt.show()
gpt_feedback = Your code is creating a histogram of mean salaries across industries. However, the problem prompts wants you to create two plots showing the relationship between `mean_salary` and `median_salary`, and `mean_salary` and `members`. Instead of a histogram, you need to create two scatter plots. Here are some hints: to create a scatter plot, you can use `plt.scatter(x, y)`. For comparison between `mean_salary` and `median_salary`, `x` would be a list of all `mean_salary`s and `y` would be a list of all `median_salary`s. Similarly, for comparison between `mean_salary` and `members`, `x` would be a list of all `mean_salary`s and `y` would be a list of all `members`.
gpt_feedback_length = 104
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'bakery_salary'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_advanced_plotting_code_basic_scatter/submissions/Liepard_36306163.py</code>
	<pre class='pedal-python-code python'><code>from bakery_salary import industries
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_advanced_plotting_code_basic_scatter.Nosepass_36799328.py]
student_code = 
	from bakery_salary import industries
	import matplotlib.pyplot as plt
	
	mean_sal = []
	med_sal = []
	members = []
	for industry in industries:
	    mean_sal.append(industry.mean_salary)
	    med_sal.append(industry.med_sal)
	    members.append(industry.members)
	    
	plt.scatter(mean_sal, med_sal)
	plt.title('Mean and Median Salaries (U.S. DOL 2021)')
	plt.xlabel('Mean Salary')
	plt.ylabel('Median Salary')
	plt.show()
	
	plt.scatter(mean_sal, Members)
	plt.title('Mean and Memebers Salaries (U.S. DOL 2021)')
	plt.xlabel('Mean Salary')
	plt.ylabel('Number of Members')
	plt.show()
gpt_feedback = Looking at your code, it seems like you have a small mistake in the attribute names used while appending to lists for median salaries and members. In the second visualization, you should use 'members' instead of 'Members'. Python is case-sensitive, so it is crucial to respect the case of variable names. You also made a small mistake while appending to the list 'med_sal'. Use 'industry.median_salary' instead of 'industry.med_sal'.
gpt_feedback_length = 68
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>Members</code> was used on line 18, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 2
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_advanced_plotting_code_basic_scatter.Nuzleaf_38568583.py]
student_code = 
	from bakery_salary import industries
	import matplotlib.pyplot as plt
	
	mean_salary_list=[]
	for industry in industries:
	    mean_salary_list.append(industry.mean_salary/1000)
	median_salary_list=[]
	for industry in industries:
	    median_salary_list.append(industry.median_salary)
	members_list=[]
	for industry in industries:
	    members_list.append(industry.members)
	plt.scatter(mean_salary_list, median_salary_list)
	plt.xlabel("Mean Salary")
	plt.ylabel("Median Salary")
	plt.title("Mean Salary Compared to Median Salary")
	plt.show
	plt.scatter(mean_salary_list, members)
	plt.xlabel("Mean Salary")
	plt.ylabel("Members")
	plt.title("Mean Salary Compared to Members")
	plt.show
gpt_feedback = Looks like you're doing well! However, you have a minor mistake. You forgot to append '/1000' to median salaries just like you did for the mean salaries. Plus, there's an error in the second scatter plot where you're passing 'members' instead of 'members_list'. And don't forget to call the 'show' function with parentheses i.e., 'plt.show()'.
gpt_feedback_length = 55
gpt_score = 0.0
pedal_feedback = You have not called the <code>plt.show</code> function, which actually creates the graph.
pedal_feedback_length = 12
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_for_composition_code_highest_filter]
description = Define the function `high_score` that consumes a list of integers (representing scores in a game) and produces an integer representing the highest score in the list. Ignore scores less than `100`, and stop processing values if you encounter `-999`. If the list is empty, return the value `None` instead. It is up to you to decompose this function (or not) however you want.

[bakery_for_composition_code_highest_filter.Beedrill_29030778.py]
student_code = 
	from bakery import assert_equal
	
	def high_score(scores: [int]) -> int:
	    if [i for i in scores if i >= 100] == []:
	        return None
	    to_return = 100
	    for score in scores:
	        if score == -999:
	            break
	        elif score >= to_return:
	            to_return = score
	    return to_return
	
	
	assert_equal(high_score([98, 100, 99, 101, -999, 102]), 101)
	assert_equal(high_score([]), None)
	assert_equal(high_score([70]), None)
gpt_feedback = The function you wrote seems to be on the right track but there is an issue in the way you are checking for an empty list. Instead of creating a new list that only contains values greater than or equal to `100`, you could simply check if the list is empty directly with `if not scores:`. Additionally, it's better to initialize `to_return` to `None`, not `100`. This way the function will return `None` when all values in the list are below 100 or the list is empty.
gpt_feedback_length = 87
gpt_score = 0.0
pedal_feedback = Student code failed instructor tests.
	You passed 6/8 tests.
	
	I ran your function <code class='pedal-name'>high_score</code> on some new arguments.
	<table class='pedal-table'>   <tr class='pedal-header'>
	    <th class='pedal-cell'></th>
	    <th class='pedal-cell'>Arguments</th>
	    <th class='pedal-cell'>Returned</th>
	    <th class='pedal-cell'>Expected</th>
	  </tr>     <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[100, 200, 300, -999]</code></pre></td>
	    <td class='pedal-cell'>300</td>
	    <td class='pedal-cell'>300</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[300, 200, 100, -999]</code></pre></td>
	    <td class='pedal-cell'>300</td>
	    <td class='pedal-cell'>300</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[300, 200, -999, 500, 400]</code></pre></td>
	    <td class='pedal-cell'>300</td>
	    <td class='pedal-cell'>300</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[400, 200, -999, 100, 200]</code></pre></td>
	    <td class='pedal-cell'>400</td>
	    <td class='pedal-cell'>400</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-negative-mark'>&#10060;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[-999, 400, 300, 50]</code></pre></td>
	    <td class='pedal-cell'>100</td>
	    <td class='pedal-cell'>None</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[-999]</code></pre></td>
	    <td class='pedal-cell'>None</td>
	    <td class='pedal-cell'>None</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-negative-mark'>&#10060;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[20, 40, 30, -999, 100]</code></pre></td>
	    <td class='pedal-cell'>100</td>
	    <td class='pedal-cell'>None</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[50, 200, -999, 50]</code></pre></td>
	    <td class='pedal-cell'>200</td>
	    <td class='pedal-cell'>200</td>
	  </tr></table>
pedal_feedback_length = 295
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 2
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 2
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_for_composition_code_highest_filter.Buizel_29317817.py]
student_code = 
	from bakery import assert_equal
	
	def high_score(scores: list[int]) -> int:
	    high = scores[0]
	    for score in scores:
	        if score > high:
	            high = score
	    return high
gpt_feedback = Your function currently returns the maximum number found in the list, but it does not take into account ignoring numbers less than 100 and stopping when encountering -999. Moreover, your function does not handle an empty list, which should return 'None'.
gpt_feedback_length = 41
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 1
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_for_composition_code_highest_filter.Darumaka_29509864.py]
student_code = 
	from bakery import assert_equal
	
	
	def high_score (scores:list[int])->int:
	    maximum=score[0]
	    for score in scores:
	        if score > maximum:
	            if score < 100:
	                return None 
	            maximum=score
	    return maximum
	
	assert_equal(high_score([500,50]), 500)
gpt_feedback = Good start! But you have a minor mistake in the initial assignment of the maximum score where you wrote `maximum=score[0]`. It should be `maximum=scores[0]`. However, you also can't assign the maximum score as the first element of the list in this context. Your program will throw an error if the list is empty or if the first score is less than 100. Remember to handle this case. Also, instead of returning 'None' if the score is less than 100, continue processing the other values in the list, only to consider the scores equal or higher than 100. Keep going, you're nearly there!
gpt_feedback_length = 102
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>score</code> was used on line 5, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 3

[bakery_for_composition_code_highest_filter.Elgyem_27313994.py]
student_code = 
	from bakery import assert_equal
	def high_score(scores: [int])->int:
	
	max_num = scores[0]
	
	mini = 100
	
	empty_list = []
	
	if scores == empty_list:
	    return None
	for score in scores:
	    if score==-999:
	        return max_num
	    if score < mini:
	        continue
	    if score == -999:
	        break
	    if score > max_num:
	        max_num = score
	        return max_num
	
	assert_equal(high_score([300, 40, 200, 150]), 300)
	
	assert_equal(high_score([50, 100, 400, -999]), 400)
	
	assert_equal(high_score([600, 800,]), 800)
	
	assert_equal(high_score([300, 200, -999, 400]), 300)
gpt_feedback = There seems to be a lot of redundancy in your code. You have two checks for the value `-999` where one would suffice. Also, take note that your `max_num` variable should be initialized to minimum score `100`, not the first item in the list. Lastly, your `return max_num` statement is inside your for loop which means your function will return after checking only the first score. Make sure to place it outside the loop instead.
gpt_feedback_length = 75
gpt_score = 0.0
pedal_feedback = Bad indentation on line 4 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_for_composition_code_highest_filter/submissions/Elgyem_27313994.py</code>
	<pre class='pedal-python-code python'><code>max_num = scores[0]
	^</code></pre>
	</div>
	Expected an indented block after function definition on line 2.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 44
pedal_score = 0
instructor_feedback_gpt_accurate = 3
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 1
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_for_composition_code_highest_filter.Girafarig_28396215.py]
student_code = 
	from bakery import assert_equal
	
	def high_score(scores: list[int]) -> int:
	    if not scores:
	        return None
	    highest_score = scores[0]
	    taking = True
	    for score in scores:
	        if -999 == score:
	            taking = False
	        elif taking and score >= 100 and score > highest_score:
	            highest_score = score
	    if highest_score < 100:
	        return None
	    return highest_score
	
	assert_equal(high_score([101, 150, 175, -10, 53]), 175)
	assert_equal(high_score([52, 63]), None)
	assert_equal(high_score([105, -999, 175, -10, 53]), 105)
	assert_equal(high_score([]), None)
gpt_feedback = Great job! Your program is working as expected. You correctly implemented the `high_score` function with the conditions specified. You're also using the `assert_equal` function to test the code properly. Keep up the good work!
gpt_feedback_length = 34
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_for_composition_code_highest_filter.Lapras_28139989.py]
student_code = 
	from bakery import assert_equal
	def high_score(List:list[int])-> int:
	    max = List[0]
	    cont_count = True
	    for nums in List:
	        if nums == -999:
	            cont_count = False
	            if nums >=100:
	                max = nums
	    return max
	
	assert_equal(high_score([150, -999, 200]), 150)
gpt_feedback = Your current implementation doesn't seem to be handling the case when the number is greater than or equal to 100 correctly. Currently, your logic to check if the number is greater than 100 is inside the check for -999, which means it will never be executed unless the number is -999. You should write these as two separate conditional checks. Additionally, the initialization of the maximum value should account for the possibility of an empty list, where there would be no value at index 0.
gpt_feedback_length = 85
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>cont_count</code> was given a value on line 6, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 2
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 2

[bakery_for_composition_code_highest_filter.Liepard_28823730.py]
student_code = 
	from bakery import assert_equal
	
	def high_score(integers: list[int]) -> int:
	    highest = integers[0]
	    if len(integers) > 0:
	        for integer in integers:
	            if integer == -999:
	                return None
	            if integer >= 100:
	                if highest < integer:
	                    highest = integer
	        return highest
gpt_feedback = There are few issues to be corrected in your current code. 
	
	First, you are initializing `highest` as `integers[0]` and you didn't make sure that this value is at least `100`. You only check for integers `>=100` inside the loop. 
	
	Second, your code currently returns `None` if encounters `-999`. However, the problem statement asks to stop processing the list when `-999` is encountered but it doesn't explicitly mention returning `None`. This might mean that you need to return the `highest` score so far if `-999` is encountered. 
	
	Lastly, try to properly handle the case of empty list following the literal meaning mentioned in the problem statement i.e., 'return None' for an empty list input. Consider implementing these changes and re-run your program.
gpt_feedback_length = 121
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_for_composition_code_highest_filter.Nosepass_28623443.py]
student_code = 
	from bakery import assert_equal
	
	def filter_scores(scores: list[int])->list[int]:
	    #filter the scores
	    New_Scores = []
	    for score in scores:
	        if score == -999:
	            return New_Scores
	        if score > 100:
	            New_Scores.append(score)
	    return New_Scores
	
	def high_score(raw_scores: list[int])->int:
	    scores = filter_scores(raw_scores)
	    if not scores:
	        return None
	    max_s = scores[0]
	    for score in score:
	        if score > max_s:
	    return max_s
	
	assert_equal(filter_scores([1,-999,300]),[])
	assert_equal(filter_scores([1,300,500]),[300,500])
	assert_equal(filter_scores([1000,300,101]),[1000,300,101])
	
	assert_equal(high_score([1,-999,300]),None)
	assert_equal(high_score([300,200,3000]),3000)
	assert_equal(high_score([101,3,54]),101)
gpt_feedback = Your code has an indentation error in the `high_score` function. The part of the code after `if score > max_s:` should be indented properly. Also, you seem to have a typo in the same function. You wrote `for score in score:` instead of `for score in scores:`. Please correct these errors and try again.
gpt_feedback_length = 54
gpt_score = 0.0
pedal_feedback = Bad indentation on line 20 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 20 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_for_composition_code_highest_filter/submissions/Nosepass_28623443.py</code>
	<pre class='pedal-python-code python'><code>    return max_s
	   ^</code></pre>
	</div>
	Expected an indented block after 'if' statement on line 19.
	Suggestion: Check line 20, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 50
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 2
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_for_composition_code_highest_filter.Nuzleaf_32379968.py]
student_code = 
	from bakery import assert_equal
	
	def no_less_than_100(numbers:list[int])->list[int]:
	    stitch=[]
	    for number in numbers:
	        if number>=100:
	            stitch.append(number)
	    return stitch
	
	def maximum(numbers:list[int])->int:
	    purple=numbers[0]
	    for number in numbers:
	        if purple<number:
	            purple=number
	    return purple
	
	def
	        
	def high_score(numbers:list[int])->int:
	    x=no_less_than_100(numbers)
	    if not numbers:
	        return None   
	    taking=True
	    lilo=[]
	    for number in x:
	    if number==-999:
	        taking=False
	    elif taking:   
	        lilo.append(number)
	    return maximum(lilo)
	    
	assert_equal(high_score([]), None)
	assert_equal(high_score([99,2,101,100]), 101)
	assert_equal(high_score([5,-999]), 0)
gpt_feedback = There seems to be a syntax error in your code. You have a `def` keyword without completing its declaration. Please write a name for that function. Also, in the `high_score` function, there is not correct indentation in your for loop. Remember, Python uses indentation to define blocks. Make sure to indent your `if` and `elif` statements correctly under the `for` loop.
gpt_feedback_length = 61
gpt_score = 0.0
pedal_feedback = Bad syntax on line 17.
	
	The traceback was:
	<div class='pedal-traceback'>Line 17 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_for_composition_code_highest_filter/submissions/Nuzleaf_32379968.py</code>
	<pre class='pedal-python-code python'><code>def
	   ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 17, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 34
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 2
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_functions_flow_code_timely_extraction]
description = <p>The functions below calculate whether a given hour is in the morning (between 5am <em>and</em> 12pm). The first function <code>is_morning</code> (incomplete) has two helper functions (<code>is_past_dawn</code> and <code>is_before_noon</code>, both complete). Finish the <code>is_morning</code> function to call the other two.</p>

[bakery_functions_flow_code_timely_extraction.Beedrill_18988758.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return is_past_dawn(hour) and is_before_noon(hour)
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = Great job on your implementation! You have correctly used both helper functions inside the `is_morning` function to check whether a given hour falls within morning time. This is an efficient way to modularize your code, by having each function perform one specific check. Also, your test cases cover a good range of possibilities, from before dawn to afternoon.
gpt_feedback_length = 58
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_functions_flow_code_timely_extraction/submissions/Beedrill_18988758.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_functions_flow_code_timely_extraction.Buizel_20306146.py]
student_code = 
	from bakery import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return ___
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = In the `is_morning` function, we are trying to find out whether the given hour is in the morning, i.e., between 5am and 12pm. Therefore, you need to use both `is_past_dawn` and `is_before_noon` helper functions. These two conditions need to be fulfilled simultaneously, which means you should use the logical 'and' operator between them.
gpt_feedback_length = 53
gpt_score = 0.0
pedal_feedback = It looks like you have unconnected blocks on line 10. Before you run your program, you must make sure that all of your blocks are connected that there are no unfilled holes.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 1
instructor_feedback_pedal_jargon = 5
instructor_feedback_pedal_sentiment = 1

[bakery_functions_flow_code_timely_extraction.Darumaka_20596757.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return hour 
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = You need to call the helper functions `is_before_noon` and `is_past_dawn` within the `is_morning` function and combine them using logical operator. The `hour` parameter in the `is_morning` function, should not be returned as is.
gpt_feedback_length = 33
gpt_score = 0.0
pedal_feedback = Your function returned an integer on line 12, even though you defined it to return a boolean. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_functions_flow_code_timely_extraction.Elgyem_18650843.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return ___
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = In the 'is_morning' function, you need to utilize both 'is_before_noon' and 'is_past_dawn' functions. Use them to check if the provided 'hour' falls within the morning time range (5 <= hour <= 12), if it does return True, otherwise return False.
gpt_feedback_length = 40
gpt_score = 0.0
pedal_feedback = It looks like you have unconnected blocks on line 10. Before you run your program, you must make sure that all of your blocks are connected that there are no unfilled holes.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 1
instructor_feedback_pedal_jargon = 5
instructor_feedback_pedal_sentiment = 1

[bakery_functions_flow_code_timely_extraction.Girafarig_19721299.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return is_past_dawn(hour) and is_before_noon(hour)
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = Your code seems correct, you've implemented the 'is_morning' function correctly by using 'is_past_dawn' and 'is_before_noon' functions. Your test cases also cover different times of the day. Great job!
gpt_feedback_length = 28
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_functions_flow_code_timely_extraction/submissions/Girafarig_19721299.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 2
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_functions_flow_code_timely_extraction.Lapras_20074571.py]
student_code = 
	from bakery import assert_equal
	
	def is_morning(hour: int) -> bool:
	    def is_before_noon(hour: int) -> bool:
	    return hour <= 12    
	    def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	
	
	
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = Your function 'is_morning' doesn't appear to be returning anything at the moment. This function should actually call the 2 helper functions ('is_before_noon' and 'is_past_dawn') and return their logical AND (using the 'and' keyword). The statement should look something like this within 'is_morning': return is_before_noon(hour) and is_past_dawn(hour)
gpt_feedback_length = 46
gpt_score = 0.0
pedal_feedback = Bad indentation on line 5 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 5 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_functions_flow_code_timely_extraction/submissions/Lapras_20074571.py</code>
	<pre class='pedal-python-code python'><code>    return hour <= 12    
	    ^</code></pre>
	</div>
	Expected an indented block after function definition on line 4.
	Suggestion: Check line 5, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 57
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 2
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 2

[bakery_functions_flow_code_timely_extraction.Liepard_19874187.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return is_past_dawn(hour) and is_before_noon(hour)
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = Your code seems to be written correctly. The function is_morning correctly uses the two helper functions is_past_dawn and is_before_noon to determine whether the given hour is in the morning. All your test cases also passed. Great job!
gpt_feedback_length = 37
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_functions_flow_code_timely_extraction/submissions/Liepard_19874187.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 3
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_functions_flow_code_timely_extraction.Nosepass_19326157.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return is_past_dawn or is_before_noon
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = The issue seems to be in your 'is_morning' function. You're just returning the function itself, not the call to the function. Passing an argument to both 'is_past_dawn' and 'is_before_noon' in the 'is_morning' function is neccessary. Also, you might want to use a logical AND operator to verify that both conditions are met. Make sure that the given hour is both past dawn and is before noon to correctly identify it as morning.
gpt_feedback_length = 72
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>hour</code> was given a value on line 9, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 2
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 2

[bakery_functions_flow_code_timely_extraction.Nuzleaf_25659450.py]
student_code = 
	from bakery import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return is_before_noon or is_past_dawn
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = Nice try, but the function `is_morning` is not currently working properly. Remember that you aim to check if a given hour is BOTH past dawn and before noon. Use a logical operator to combine the conditions produced by `is_before_noon()` and `is_past_dawn()` functions. However, while calling these functions you also need to pass the parameter 'hour' into them, which is missing in your current code.
gpt_feedback_length = 64
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>hour</code> was given a value on line 9, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 2
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 2
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 3

[bakery_if_patterns_make_pig_latin]
description = Define a function `make_pig_latin` that consumes a word (a string) and converts it to actual pig latin (also a string). If the first letter of the word is a vowel, just return that word with `"ay"` added to the end. Otherwise, take the first character of the word and move it to the end of the string, and *then* add `"ay"` to the end. Do not worry about capitalization. If the empty string is given, return `"ay"`.

[bakery_if_patterns_make_pig_latin.Beedrill_21205343.py]
student_code = 
	def make_pig_latin(word: str) -> str:
	    if word[0].lower() in "aeiou":
	        return word + "ay"
	    else:
	        return word[1:] + word[0] + "ay"
	
	print("TEST PASSED")
	print("TEST PASSED")
	print("TEST PASSED")
gpt_feedback = The function does seem to follow the logic of converting a word into pig latin, but it is missing a check for an empty string. Before checking a character at a specific index of the string, you should always ensure the string is not empty to prevent an index error. Also, the current tests aren't validating the function's accuracy. If you add a test like `assert make_pig_latin('hello') == 'ellohay'`, it could improve your testing approach.
gpt_feedback_length = 75
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>make_pig_latin</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 1
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_if_patterns_make_pig_latin.Buizel_22898628.py]
student_code = 
	from cisc108 import assert_equal
	
	def make_pig_latin(word: str) -> str:
	    if word[0] in "AEIOUaeiou"
	        return word + "ay"
gpt_feedback = You seem to be missing a colon at the end of the 'if' statement. Python requires that when initiating code blocks (the next lines of code to be executed if the 'if' condition is true).
gpt_feedback_length = 35
gpt_score = 0.0
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Buizel_22898628.py</code>
	<pre class='pedal-python-code python'><code>    if word[0] in "AEIOUaeiou"
	                              ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 68
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 3

[bakery_if_patterns_make_pig_latin.Darumaka_23539066.py]
student_code = 
	vowel=a
	
	def make_pig_latin (word:str)->str:
	    if word [:0] vowel
	    return word+"ay"
	#else:
	#    return wor
gpt_feedback = You're on the right track, but you've missed a few things. Firstly, the syntax of the 'if' statement is incorrect; it should be formatted like 'if condition:', where 'condition' is some expression that Python can evaluate to either true or false. Secondly, you need to check if the first letter of the word is in the set of vowels. You could define 'vowels' as a string containing all the vowels, and then use the 'in' operator to check if the first letter of the word is a vowel. Finally, remember to handle the case when the first letter is not a vowel.
gpt_feedback_length = 102
gpt_score = 0.0
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Darumaka_23539066.py</code>
	<pre class='pedal-python-code python'><code>    if word [:0] vowel
	                 ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 55
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 2
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 2

[bakery_if_patterns_make_pig_latin.Elgyem_20565700.py]
student_code = 
	from cisc108 import assert_equal
	def make_pig_latin(word:str)->str:
	     if word[0].lower()in "aeiou"
	        return word+"ay"
	    else
	        return word[1:]+word[0]+"ay"
	        
	assert_equal(make_pig_latin(word),ordway)
gpt_feedback = There are several issues with your code. Remember to end your if statement condition with a colon. Also, your call to assert_equal is not constructed properly. The parameters to this function should be a call to your function `make_pig_latin()` with a test input, and the expected output. For example, `assert_equal(make_pig_latin('word'),'ordway')`. Additionally, remember to handle the case when the string is empty.
gpt_feedback_length = 61
gpt_score = 0.0
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Elgyem_20565700.py</code>
	<pre class='pedal-python-code python'><code>     if word[0].lower()in "aeiou"
	                                 ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 71
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_if_patterns_make_pig_latin.Girafarig_21526564.py]
student_code = 
	from cisc108 import assert_equal
	
	def make_pig_latin(word: str) -> str:
	    if word[0] in 'aeiou':
	        return word + 'ay'
	    return word[1:] + word[0] + 'ay'
	
	assert_equal(make_pig_latin("hello"), "elloay")
	assert_equal(make_pig_latin("arugula"), "arugulaay")
	assert_equal(make_pig_latin("potato"), "otatopay")
	assert_equal(make_pig_latin("green"), "reengay")
gpt_feedback = The function is almost correct, but you're not handling the empty string properly. According to the problem instructions, when the empty string is given, your function should return 'ay'. At the moment, an IndexError would be thrown when trying to access the first element of an empty string. To fix this, add an edge case to handle the scenario when an empty string is given.
gpt_feedback_length = 65
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Girafarig_21526564.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_if_patterns_make_pig_latin.Lapras_21931235.py]
student_code = 
	from bakery import assert_equal
	def make_pig_latin(Word:str)->str:
	    if Word[0] in "aeiouAEIOU":
	        pig_latin = Word + "ay"
	    elif Word[0] not in "aeiouAEIOU" and "":
	        pig_latin = Word[1:] + Word[0] +"ay"
	    else:
	            pig_latin = "ay"
	    return pig_latin
	
	assert_equal(make_pig_latin("Fiammetta"), "iamettaFay")       
	assert_equal(make_pig_latin(""), "ay")
	assert_equal(make_pig_latin("Exusiai"), "Exusiaiay")
gpt_feedback = Your logic is mostly correct, but there is a problem with your conditional statement. The part `elif Word[0] not in "aeiouAEIOU" and ""` doesn't check whether the input string is empty. Instead it assigns "" as a boolean which will always be False. So, you should directly check if the string is empty by comparing it using `Word != ""`
gpt_feedback_length = 60
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	An IndexError occurred:
	
	<pre class='pedal-exception'>String index out of range</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Lapras_21931235.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(make_pig_latin(""), "ay")
	             ^^^^^^^^^^^^^^^^^^</code></pre>
	
	Line 3 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Lapras_21931235.py</code> in <code class='pedal-frame'>make_pig_latin</code>
	<pre class='pedal-python-code python'><code>    if Word[0] in "aeiouAEIOU":
	       ^^^^^^^</code></pre>
	</div>
	An IndexError means that you indexed past the end of a string or a list.  For example, if you access index 5 in a list with 3 items.
	
	Suggestion: Remember that the first position in a list or string is 0. Often, you will be off by just one index position, so check your math. Also, make sure the list or string has the right value.
pedal_feedback_length = 124
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 1
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 2

[bakery_if_patterns_make_pig_latin.Liepard_21631305.py]
student_code = 
	from cisc108 import assert_equal
	
	def make_pig_latin(word: str) -> str:
	    if word[0] in "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ":
	        return word + "ay"
gpt_feedback = Good start, but you are checking if the first character of the word is a letter which doesn't seem to be a requirement of the problem. You should instead check if the first character is a vowel (a, e, i, o, u). Additionally, there is a condition of the problem that if the first character is not a vowel, you should move it to the end of the word before appending 'ay'. Also, don't forget to check if the word is an empty string in the first place.
gpt_feedback_length = 88
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_if_patterns_make_pig_latin.Nosepass_22110513.py]
student_code = 
	from cisc108 import assert_equal
	
	def make_pig_latin(word: str)->str:
	    vowels = ["A","E","I","O","U"]
	    if not word:
	        return "ay"
	    elif word[0].upper() in vowels:
	        return word + "ay"
	    return word[1:] + word[0] + "ay"
	
	assertequal(make_pig_latin(""),"ay")
	assertequal(make_pig_latin("effort"),"effortay")
	assertequal(make_pig_latin("make"),"akemay")
	assertequal(make_pig_latin("word"),"ordway")
	assertequal(make_pig_latin("award"),"awarday")
gpt_feedback = The code is almost perfect! Just a small typo. The correct assertion function is named `assert_equal`, not `assertequal`. Such small typos are common sources of bugs!
gpt_feedback_length = 26
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>assertequal</code> was used on line 11, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_if_patterns_make_pig_latin.Nuzleaf_27538944.py]
student_code = 
	from cisc108 import assert_equal
	
	def make_pig_latin(word:str)->str:
	    if word==""
	        return "ay"
	    elif word[0] in "aeiou":
	        return word+"ay"
	    else:
	        return word[1:]+word[0]+"ay"
gpt_feedback = There seems to be a syntax error in your if condition. When checking for equality in Python, you should use '==', not '='. Also, don't forget to put colon at the end of the if statement.
gpt_feedback_length = 36
gpt_score = 0.0
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Nuzleaf_27538944.py</code>
	<pre class='pedal-python-code python'><code>    if word==""
	               ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 51
pedal_score = 0
instructor_feedback_gpt_accurate = 3
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 4

[bakery_intro_import_code_import_variable]
description = The file `my_second_module.py` is available to be imported into your program, and contains a string variable named `art`. Import the variable from the module, and print its contents.

[bakery_intro_import_code_import_variable.Beedrill_16150346.py]
student_code = 
	import art from my_second_module
gpt_feedback = In Python, the correct syntax for importing specific attributes or functions from a module is 'from module_name import item'. Try to adapt your import statement accordingly.
gpt_feedback_length = 26
gpt_score = 0.0
pedal_feedback = Bad syntax on line 1.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_intro_import_code_import_variable/submissions/Beedrill_16150346.py</code>
	<pre class='pedal-python-code python'><code>import art from my_second_module
	           ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 45
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 1
instructor_feedback_pedal_jargon = 5
instructor_feedback_pedal_sentiment = 1

[bakery_intro_import_code_import_variable.Buizel_17811305.py]
student_code = 
	from my_second_module.py import art
gpt_feedback = It looks like the way you're trying to import a module is not quite correct. In Python, you should not include the file extension (.py) when importing. Instead you should import just the module name. Try to import the 'art' variable from 'my_second_module' like so: 'from my_second_module import art'.
gpt_feedback_length = 49
gpt_score = 0.0
pedal_feedback = You should not have the `.py` part of the filename in your `import` statement. Only use the name of the module on its own!
pedal_feedback_length = 24
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_intro_import_code_import_variable.Darumaka_17744727.py]
student_code = 
	art = """
	⁣          🎈🎈  ☁️
	         🎈🎈🎈
	 ☁️     🎈🎈🎈🎈
	        🎈🎈🎈🎈
	   ☁️    ⁣🎈🎈🎈
	           \|/
	           🏠   ☁️
	   ☁️         ☁️
	
	🌳🌹🏫🌳🏢🏢_🏢🏢🌳🌳
	print(""")
gpt_feedback = You need to import the variable from `my_second_module.py` and then print its contents. Using the `import` statement, you can import specific variables from files in the same directory. Finally you can print the variable using print() function.
gpt_feedback_length = 37
gpt_score = 0.0
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_intro_import_code_import_variable/submissions/Darumaka_17744727.py</code>
	<pre class='pedal-python-code python'><code>print(""")
	         ^</code></pre>
	</div>
	Unmatched ')'.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 40
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 1
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 3

[bakery_intro_import_code_import_variable.Elgyem_16229137.py]
student_code = 
	import file
	
	print("art",my_second_module.py)
gpt_feedback = It seems like you are trying to import a file as a module. In Python, you don't need to specify the file extension (.py) when importing. You need to import the specific variable `art` from the module. Your code should look like this: `from my_second_module import art`. Also, when you print the variable, you don't need to include the quotes; just write `print(art)`.
gpt_feedback_length = 63
gpt_score = 0.0
pedal_feedback = You should not have the `.py` part of the filename in your `import` statement. Only use the name of the module on its own!
pedal_feedback_length = 24
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_import_code_import_variable.Girafarig_18042275.py]
student_code = 
	from my_secon_module import art
	print(art)
gpt_feedback = The module you're trying to import seems to have a typo in its name. Check your spelling and make sure it matches exactly with the filename.
gpt_feedback_length = 26
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'my_secon_module'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_intro_import_code_import_variable/submissions/Girafarig_18042275.py</code>
	<pre class='pedal-python-code python'><code>from my_secon_module import art
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_intro_import_code_import_variable.Lapras_17636639.py]
student_code = 
	import my_second_module.py 
	print (art)
gpt_feedback = This line `import my_second_module.py` should not include .py extension. You should import modules in python without the .py extension. Also, when you want to get a variable from a module, you need to use the name of the module followed by a dot (.) before the variable name. So, your print should be `print(my_second_module.art)`.
gpt_feedback_length = 54
gpt_score = 0.0
pedal_feedback = You should not have the `.py` part of the filename in your `import` statement. Only use the name of the module on its own!
pedal_feedback_length = 24
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_intro_import_code_import_variable.Liepard_18047518.py]
student_code = 
	from my_second_module.py import art
	print(art)
gpt_feedback = The syntax on your import statement is incorrect. In Python we don't place the `.py` file extension when importing modules. Try using `from my_second_module import art` instead.
gpt_feedback_length = 27
gpt_score = 0.0
pedal_feedback = You should not have the `.py` part of the filename in your `import` statement. Only use the name of the module on its own!
pedal_feedback_length = 24
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_intro_import_code_import_variable.Nosepass_16621124.py]
student_code = 
	import my_second_module.py
	print(art)
gpt_feedback = It seems like there is a minor issue with your import statement. In Python, when you import a module, you do not need to include the '.py' extension. Also, you need to specify the module's name when accessing its variables. Use 'my_second_module.art' instead of just 'art'. Try correcting these and run your code again.
gpt_feedback_length = 54
gpt_score = 0.0
pedal_feedback = You should not have the `.py` part of the filename in your `import` statement. Only use the name of the module on its own!
pedal_feedback_length = 24
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_intro_import_code_import_variable.Nuzleaf_22980678.py]
student_code = 
	from my_second_module.py import art
	print (art)
gpt_feedback = You are on the right track! However, when importing a Python module, we do not need to include the '.py' extension, we simply use the file name. So, your code should be 'from my_second_module import art'. Also, ensure the my_second_module.py file exists and is in the correct directory.
gpt_feedback_length = 48
gpt_score = 0.0
pedal_feedback = You should not have the `.py` part of the filename in your `import` statement. Only use the name of the module on its own!
pedal_feedback_length = 24
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_intro_programs_code_try_blockpy]
description = Hello, and welcome to BlockPy! This tool will let you write and run  Python code.
	
	Below, you can see the code editor where there is already a bit of code.
	
	Click the green "Run" button to see the result of running your  code in the "Console" and "Feedback" areas.
	
	When you see the green "Complete" box, you've completed this problem!

[bakery_intro_programs_code_try_blockpy.Beedrill_15803943.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Your code is correct and prints out the message correctly! Great start!
gpt_feedback_length = 12
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Buizel_16401118.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Perfect! You've written a simple code to print 'Welcome to BlockPy!' well. Remember, 'print' in Python is used to print on the console.
gpt_feedback_length = 23
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Darumaka_16967377.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Good job! Your code correctly prints the welcome message to the screen. Remember, the print function is used to display output on the console.
gpt_feedback_length = 24
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Elgyem_15701933.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Great job! Your code runs perfectly and prints the desired message.
gpt_feedback_length = 11
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Girafarig_16114772.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Great job! Your code is correct and prints the required output correctly: 'Welcome to BlockPy!'. Make sure to understand the functionality of the print statement in Python, which is to print any string passed into it.
gpt_feedback_length = 36
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Lapras_16280492.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Great job! You have correctly used the print function to output a string. Keep practicing your Python skills!
gpt_feedback_length = 18
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Liepard_16523595.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Excellent job, your Python code is correct, and it prints out the required output when executed. This is a simple example of using the built-in print function to display text.
gpt_feedback_length = 30
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Nosepass_15790367.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Good job! Your code runs without errors and prints the correct output.
gpt_feedback_length = 12
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Nuzleaf_22476432.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Great job! The print statement you've created runs successfully and outputs the string 'Welcome to BlockPy!' in the console as expected. No errors found.
gpt_feedback_length = 24
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_nesting_list_dataclasses_code_good_job]
description = The dataclass `Job` is defined below with the fields `title` (str), `salary` (int), `available` (boolean), and `company` (str).
	
	Define a function `best_job` that consumes a list of jobs and returns the `Job` with the highest `salary` that is `available`. If no jobs are available, then return the default `UNEMPLOYED` job instead.
	
	You will need to unit test your code a sufficient number of times.
	
	**HINT**: Define a helper function to filter out the unavailable jobs BEFORE you determine the highest salary `Job`. An `if` statement used as a Defensive Guard will be very effective for returning the appropriate value in the case where there are no available guards. Having two helper functions (one to filter available jobs, and one to determine the highest salary) in addition to the main `best_job` function makes this a lot easier to keep track of everything.

[bakery_nesting_list_dataclasses_code_good_job.Beedrill_31352318.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def best_job(jobs: [Job]) -> Job:
	    if not [job for job in jobs if job.available]:
	        return UNEMPLOYED
	    return max([job for job in jobs if job.available], key=lambda job: job.salary)
gpt_feedback = Great job! You have correctly created the `Job` dataclass and the `best_job` function which handles cases where no jobs are available. However, you forgot to provide unit tests to ensure your function works as expected.
gpt_feedback_length = 35
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 2, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_nesting_list_dataclasses_code_good_job.Buizel_31739575.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
gpt_feedback = Good start of the problem. You have accurately defined the `Job` dataclass and also the `UNEMPLOYED` job instance correctly. Now move on to defining your helper functions and the main `best_job` function to solve the problem.
gpt_feedback_length = 36
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 2, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_nesting_list_dataclasses_code_good_job.Darumaka_31747902.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def available(avail:[Job])->bool:
	    taking = []
	    for avai in avail:
	        if avail.available is True:
	            taking.append(avai)
	    return False
	
	Job1 = [Job("banker", 5, True, "PNC")]
	assert_equal(available(Job1), [Job("banker", 5, True, "PNC")])
gpt_feedback = Great start! However, there appear to be a few things you may want to revise in your `available` function. First, it is declared to return a boolean but you're actually trying to return a list (`taking`). The main task of this function should be to filter the available jobs and return that list, so you may want to change its return type from `bool` to `List[Job]`. Moreover, you are currently using `avail.available` in your if condition, but here `avail` refers to the whole list. Instead, you should check `avai.available` in your if condition since `avai` is the current job you're looking at in the loop.
gpt_feedback_length = 105
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>taking</code> was given a value on line 16, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 4
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 2
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 2

[bakery_nesting_list_dataclasses_code_good_job.Elgyem_30552172.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	def can(have:list[Job])->bool:
	    new_list=[]
	    for h in have:
	        if h.available==True:
	            new_list.append(h)
	    return new_list
	
	def highest(
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
gpt_feedback = It seems like you started off correctly defining your `Can` function which filters out the jobs based on their availability. A more descriptive name can be used for better code readability. Also, remember to use the same function definition names as given in the problem statement. You need to complete the function `highest` and after that call these two helper functions in your main function, `best_job`. In the `highest` function, you should find the job with the highest salary. Remember to return `UNEMPLOYED` job from `best_job` function in case there are no available jobs.
gpt_feedback_length = 94
gpt_score = 0.0
pedal_feedback = Bad syntax on line 18.
	
	The traceback was:
	<div class='pedal-traceback'>Line 18 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_nesting_list_dataclasses_code_good_job/submissions/Elgyem_30552172.py</code>
	<pre class='pedal-python-code python'><code>def highest(
	           ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 18, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 45
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_nesting_list_dataclasses_code_good_job.Girafarig_31362083.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def best_job(jobs: list[Job]) -> Job:
	    greatest_job = UNEMPLOYED
	    for job in jobs:
	        if job.available:
	            if job.salary > greatest_job.salary:
	                greatest_job = job
	    return greatest_job
	
	
	painter = Job("Painter", 5000, True, "Painers Inc.")
	seamstress = Job("Seamstress", 4000, False, "Sewing and Strings")
	server = Job("waiter", 3500, False, "Bob's")
	
	assert_equal(best_job([painter, seamstress, waiter]), 8500)
	assert_equal(best_job([waiter]), UNEMPLOYED)
	assert_equal(best_job([painter]), 5000)
gpt_feedback = Your function seems to be on the right track, but keep in mind that the `best_job` function should return a job instance, not a salary. So, instead of comparing the salary (like `8500` or `5000`), it should return a Job instance. Also, I noticed that you have defined a `server` Job instance but you used the name `waiter` later, make sure that these names match.
gpt_feedback_length = 65
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>waiter</code> was used on line 26, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_nesting_list_dataclasses_code_good_job.Lapras_30790908.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def best_job(jobs:[Job])-> Job:
	    greatest_job = UNEMPLOYED.salary
	    for job in jobs:
	        if job.salary > greatest_job:
	            if job.available:
	                greatest_job = job.salary
	    return greatest_job
	
	jobslist = [Job('Legend', 0, False, 'Earth'),
	            Job('Garbageman', 30_000, True, 'City'),
	            Job('Lawyer', 400_000, False, 'City'),
	            Job('Plumber', 75_000, True, 'City')]
	assert_equal(best_job(jobslist), 75_000)
	assert_equal(best_job([]), 0)
	assert_equalassert_equal(best_job(jobslist[:-1]), 30_000)
gpt_feedback = Your function `best_job` currently returns the greatest salary of available jobs, but it should return the `Job` object instead. Also, remember that the unemployed job is considered to be available too. Hence, you will want to return `UNEMPLOYED` if there are no available jobs from the list. Also, it's worth mentioning that you have a repeated `assert_equal` in your last test case. You should correct that.
gpt_feedback_length = 66
gpt_score = 0.0
pedal_feedback = Your function returned an integer on line 25, even though you defined it to return A Job. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_nesting_list_dataclasses_code_good_job.Liepard_31859101.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def best_job(jobs: list[Job]) -> Job:
	    highestPay = 0
	    jobTitle = ""
	    for job in jobs:
	        if job.available == False:
	            if job.salary > highestPay:
	                highestPay = job.salary
	                jobTitle = job.title
	    return jobTitle
gpt_feedback = You have nearly completed the task. However, there are a few changes you need to make in your function. You are currently checking for a job who is not available, which is incorrect given the problem statement. Instead, you should focus on jobs that are available. Also, you are returning the title of the highest paying job but you need to return the Job instance itself. Lastly, you need to handle the case when no jobs are available, you should return the UNEMPLOYED job. Try adjusting the function to account for these items.
gpt_feedback_length = 93
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 2, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_nesting_list_dataclasses_code_good_job.Nosepass_31444935.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	def filter_un(Jobs: list[Job])->list[Job]:
	    avalible_jobs = []
	    for job in Jobs:
	        if job.avalible:
	            avalible_jobs.append(job)
	    return avalible_jobs
	
	def best_job(Jobs: list[Job])->Job:
	    largest_salary = 0
	    filtered_jobs = filter_un(Jobs)
	    
	    if not filtered_jobs:
	        return Job("Unemployed", 0, True, "None")
	    
	    best_job = filtered_jobs[0]
	    for job in Jobs:
	        if job.salary > best_job.slary:
	            best_job = job
	    return best_job
	
	assert_equal(best_job([Job("Unemployed", 0, True, "None"),Job("Software Developer", 500000, False, "Google"),Job("TA",5,True,"Uni")]),Job("TA",5,True,"Uni"))
	assert_equal(best_job([Job("Unemployed", 0, True, "None"),Job("Software Developer", 500000, True, "Google"),Job("TA",5,True,"Uni")]),Job("Software Developer", 500000, True, "Google"))
	assert_equal(best_job([Job("Unemployed", 0, False, "None"),Job("Software Developer", 500000, False, "Google"),Job("TA",5,True,"Uni")]),Job("Unemployed", 0, True, "None"))
gpt_feedback = Great start! One thing to look out for, it seems there are some typos in your code. For example, in the `filter_un` function, you are checking `job.avalible`, but it should be `job.available`. Similarly, in `best_job` function, you are checking `best_job.slary` but it should be `best_job.salary`. Watch out for these minor mistakes as they can cause execution errors.
gpt_feedback_length = 57
gpt_score = 0.0
pedal_feedback = Do not remove or alter the starting code that we gave you. You may need to check your history or reset the problem.
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_nesting_list_dataclasses_code_good_job.Nuzleaf_34424269.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	def available_jobs(jobs:list[Job])->list[job]:
	    avail_jobs=[]
	    for job in jobs:
	        if job.available:
	            avail_jobs.append(job)
	    return avail_jobs
	
	def highest_salary(jobs:list[Job])->int:
	    maximum=jobs[0].salary
	    for job in jobs:
	        if maximum<job.salary:
	            maximum=job.salary
	    return maximum
	
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def best_job(jobs:list[Job])->Job:
	    x=available_jobs(jobs)
	    if not x:
	        return UNEMPLOYED
	    y=highest_salary(x)
	    for job in jobs:
	        if job.salary==maximum:
	            return job   
	    
	
	list1:[Job("Dancer", 5000, True, "None"),Job("Driver", 200, True, "None")]
	list2:[Job("Painter",0, True, "None"),Job("Explorer", 200, False, "None")]
	list3:[Job("Hooper", 1000, False, "None"),Job("Scientist", 1200, False, "None")]
	
	assert_equal(best_job(list1), Job("Dancer", 5000, True, "None"))
	assert_equal(best_job(list2), Job("Painter",0, True, "None"))
	assert_equal(best_job(list3), UNEMPLOYED = Job("Unemployed", 0, True, "None"))
gpt_feedback = There are a few issues with your code:
	1. There is a typo in your 'available_jobs' function's return type. It should be 'list[Job]', not 'list[job]' (Python is case-sensitive).
	2. In your 'best_job' function, you are comparing 'job.salary' with the variable 'maximum' but it is not defined in that function. You should compare it with 'y' as it is the highest salary you computed.
	3. When defining your job lists namely 'list1', 'list2', and 'list3', you don't need to include type annotations i.e. ':[...]'. This is causing a syntax error. Instead, just use an '='.
	4. The last line of your test cases has a syntax error. It seems you copy-pasted the 'UNEMPLOYED' variable declaration instead of using the variable itself. It should be 'assert_equal(best_job(list3), UNEMPLOYED)'.
gpt_feedback_length = 121
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>job</code> was used on line 11, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 2

[bakery_structures_lists_code_book_list]
description = Create a list of 3 strings that represent the names of your favorite books and store them in a variable. Print this variable.

[bakery_structures_lists_code_book_list.Beedrill_23099060.py]
student_code = 
	books = ["the why axis", "I haven't read many books", "In a while"]
	
	print(books)
gpt_feedback = Your code works fine and meets the prompt requirements. However, for the sake of improved readability, titles of books are usually written with proper capitalization. For example, 'The Why Axis' instead of 'the why axis'.
gpt_feedback_length = 35
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 3
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_book_list.Buizel_24404096.py]
student_code = 
	book = ["dog" "dog" "doggy"]
gpt_feedback = It looks like you're having trouble defining a list of strings. Remember to separate strings inside a list with commas. You should also consider choosing unique names for your books. Give it another shot!
gpt_feedback_length = 34
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>book</code> was given a value on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 3
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 2
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 2

[bakery_structures_lists_code_book_list.Darumaka_24887472.py]
student_code = 
	books=["1", "2", "3"]
	print(books)
gpt_feedback = You've done a great job with creating a list and printing it. However, the values in your list should be the titles of your favorite books rather than just generic numbers. Please replace '1', '2' and '3' with book titles.
gpt_feedback_length = 40
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 3
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 2
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_book_list.Elgyem_22869578.py]
student_code = 
	# a list of 3 strings that represent the names of your favorite books 
	books=[Island,Firefly_Lane,Longevity]
	print(books)
gpt_feedback = Nice attempt! However, when putting names (or strings in general) into your list, you should always use quotations (either single or double). Right now, Python thinks Island, Firefly_Lane and Longevity are undefined variables rather than strings. Rewrite the names like 'Island', 'Firefly_Lane', 'Longevity'.
gpt_feedback_length = 43
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>Island</code> was used on line 2, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 3

[bakery_structures_lists_code_book_list.Girafarig_24550668.py]
student_code = 
	books = ["title 1", "title 2", "title 3"]
gpt_feedback = Looks great! Now, remember to print the list to complete the problem. You can do this by using the 'print()' function and calling for your variable within that function, like so: 'print(variable_name)'.
gpt_feedback_length = 32
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>books</code> was given a value on line 2, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 1
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 2

[bakery_structures_lists_code_book_list.Lapras_23924730.py]
student_code = 
	Books = ['Harry Potter', 'Origami Yoda', 'Oregairu']
	print
gpt_feedback = Your list of favorite books is correctly created. However, it seems you forgot to specify which variable to print in your print statement. Make sure to indicate the variable that you want to print as follows: print(Books).
gpt_feedback_length = 37
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>Books</code> was given a value on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 2
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 3

[bakery_structures_lists_code_book_list.Liepard_24011306.py]
student_code = 
	books = ["Harry Potter", "Lord of The Rings", "The Witcher"]
	print(book)
gpt_feedback = It seems like there is a small typo in your print statement. You have named your list 'books', but in the print function, you're trying to print a variable name 'book'. Make sure both names match.
gpt_feedback_length = 36
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>book</code> was used on line 2, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 2
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_structures_lists_code_book_list.Nosepass_23407576.py]
student_code = 
	books = ['farquad','tichi','bro the book']
	print(books)
gpt_feedback = Your code seems perfect! It successfully creates a list of book names and prints them out. No errors are detected.
gpt_feedback_length = 20
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_book_list.Nuzleaf_28121708.py]
student_code = 
	x=["Stella Luna", "Hunger Games", "A Game of Thrones"]
	print(x)
gpt_feedback = Good job! You have correctly created a list of strings and printed it correctly.
gpt_feedback_length = 14
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness]
description = Print an empty list literal value. That's it, just directly print the empty list literal value.

[bakery_structures_lists_code_emptiness.Beedrill_23099121.py]
student_code = 
	print([])
gpt_feedback = Great job! You have correctly printed the empty list literal value.
gpt_feedback_length = 11
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness.Buizel_24404292.py]
student_code = 
	empty = []
	print(empty)
gpt_feedback = Great job! Your code correctly prints an empty list literal value as required by the problem.
gpt_feedback_length = 16
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness.Darumaka_24887664.py]
student_code = 
	empty=[]
	print(empty)
gpt_feedback = Great job! Your code correctly prints out an empty list. The empty list is defined correctly and you used the print function successfully.
gpt_feedback_length = 23
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness.Girafarig_24550838.py]
student_code = 
	print([])
gpt_feedback = Great job! You've successfully printed an empty list literal value.
gpt_feedback_length = 10
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness.Lapras_23924826.py]
student_code = 
	empty = []
	print(empty)
gpt_feedback = Good job! You have correctly created and printed an empty list literal value by printing '[]'.
gpt_feedback_length = 16
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness.Liepard_24011392.py]
student_code = 
	print([])
gpt_feedback = Great job! You have printed an empty list correctly. Keep it up!
gpt_feedback_length = 12
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness.Nosepass_23407797.py]
student_code = 
	List = []
	print(List)
gpt_feedback = Great job! Your code correctly prints an empty list literal value. You have created an empty list using the correct syntax in Python, and have successfully printed it.
gpt_feedback_length = 28
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness.Nuzleaf_28121803.py]
student_code = 
	print([])
gpt_feedback = Correct! You've printed an empty list. The syntax `[]` in Python is used to denote an empty list.
gpt_feedback_length = 18
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5