[global]
instructor = Instructor
tester = johna
gpt_model = gpt-4-0613
gpt_prompt = [
	  {
	    "feedback": [
	      [
	        {
	          "role": "system",
	          "content": "You are an intelligent tutor for a introductory computer science course in Python. You never give answers but do give helpful tips to guide students with their code."
	        },
	        {
	          "role": "assistant",
	          "content": "The student was given this programming problem:\nPrint an empty list literal value. That's it, just directly print the empty list literal value."
	        },
	        {
	          "role": "user",
	          "content": "{{STUDENT_CODE_HERE}}"
	        }
	      ],
	      {
	        "name": "add_code_feedback",
	        "description": "Adds feedback on the code for the student to view.",
	        "parameters": {
	          "type": "object",
	          "properties": {
	            "feedback": {
	              "type": "string",
	              "description": "Helpful tips to guide a student with their problematic code."
	            },
	            "is_error_present": {
	              "type": "boolean",
	              "description": "If there is a problem with the code, this parameter is true."
	            }
	          },
	          "required": [
	            "feedback",
	            "is_error_present"
	          ]
	        }
	      },
	      1.0,
	      1.0
	    ]
	  },
	  "<function get_prompts_getter.<locals>.get_default_prompts.<locals>.process_prompts at 0x0000022539102980>"
	]
gpt_prompt_approximate_length = 468

[bakery_advanced_plotting_code_basic_scatter]
description = Let us return to the salary data we saw a few problems ago. Previously, we looked at the distribution of the `mean_salary` data. Now we will compare that data with the `median_salary` data and then the `members` data to see if there are any correlations. Create *two* visualizations:
	
	1. The first should show the relationship between `mean_salary` (x-axis) and `median_salary` (y-axis)
	2. The second should show the relationship between `mean_salary` (x-axis) and `members` (y-axis)
	
	Make sure you give meaningful labels to the axes and a title.
	
	You are provided the following code in the `bakery_salary.py` file. Assume `raw_salaries.csv` is a valid CSV file:
	
	```python
	from dataclasses import dataclass
	
	@dataclass
	class Industry:
	    """
	    Information about an individual industry.
	    
	    Attributes:
	        name: The name of the industry
	        members: The number of people employed in the industry.
	        mean_salary: The average salary of people in this industry.
	        median_salary: The median salary of people in this industry (more robust to outliers).
	    """
	    name: str
	    members: int
	    mean_salary: int
	    median_salary: int
	
	industries = []
	with open('raw_salaries.csv') as salary_file:
	    for line in salary_file:
	        name, members, mean, median = line.split("|")
	        industries.append(Industry(
	            name, int(members), int(mean), int(median)
	        ))
	```

[bakery_advanced_plotting_code_basic_scatter.Beedrill_37084628.py]
student_code = 
	from bakery_salary import industries
	import matplotlib.pyplot as plt
	
	mean_salaries = [industry.mean_salary for industry in industries]
	median_salaries = [industry.median_salary for industry in industries]
	members_list = [industry.members for industry in industries]
	
	plt.scatter(mean_salaries, median_salaries, label="Mean vs Median Salary")
	plt.scatter(mean_salaries, members, label="Mean Salaries vs Member Count")
	plt.xlabel("Mean Salary")
	plt.legend()
	plt.show()
gpt_feedback = In your code, you are trying to plot two different scatter plots in the same graph. If you want to represent two different relationships (i.e., Mean vs Median Salary and Mean Salary vs Member Count), it would be better to use two separate plots. Additionally, you have mistakenly referenced `members` instead of `members_list` in the second scatter plot function. Try creating two separate plots and utilize the correct variable in the second plot.
gpt_feedback_length = 73
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>members</code> was used on line 9, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 4

[bakery_advanced_plotting_code_basic_scatter.Buizel_37377473.py]
student_code = 
	from bakery_salary import industries
	
	import matplotlib.pyplot as plt
	
	
	mean_salary = [50, 90, 150, 200, 250]
	
	median_salary = [40, 80, 120, 180, 240]
	
	
	plt.scatter(mean_salary, median_salary)
	
	plt.xlabel('Mean Salary')
	
	plt.ylabel('Median Salary')
	
	plt.title('Relationship between Mean and Median Salary')
	
	plt.show()
gpt_feedback = That's a start, but the code isn't using the `industries` data that was loaded from the `raw_salaries.csv` file. In your code, you should be extracting the `mean_salary` and `median_salary` for each industry from the `industries` list. You can achieve this by using a loop or list comprehension to create those two lists before you plot them. Remember, your goal is to create a scatter plot using the actual salary data from your dataset, not predefined static arrays.
gpt_feedback_length = 77
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>industries</code> was given a value on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 2

[bakery_advanced_plotting_code_basic_scatter.Elgyem_36169335.py]
student_code = 
	from bakery_salary import industries
	import matplotlib.pyplot as plt
	
	mean=[]
	median=[]
	number=[]
	for industry in industries:
	    mean.append(industry.mean_salary)
	    median.append(industry.median_salary)
	    number.append(industry.members)
	        
	plt.scatter(mean,median)
	plt.xlablel(mean_salary)
	plt.ylablel(members)
	plt.show()
	
	plt.scatter(mean,number)
	plt.xlablel=(mean_salary)
	plt.ylablel=(median_salary)
	plt.show()
gpt_feedback = You've done a good work so far but there seems to be a few mistakes in your code.
	1. Typo in functions `plt.xlablel` and `plt.ylablel`. It should be `plt.xlabel` and `plt.ylabel`.
	2. You pass string literals, not variables, to `xlabel` and `ylabel`; therefore, they should be in quotes.
	3. The title for each plot is missing. You could use `plt.title` to add a title.
	
	After fixing these issues, your code should create the required visualizations correctly.
gpt_feedback_length = 72
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>mean_salary</code> was used on line 13, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 1

[bakery_advanced_plotting_code_basic_scatter.Girafarig_36476870.py]
student_code = 
	from bakery_salary import industries
	
	mean_salaries = []
	median_salaries = []
	for industry in industries:
	    mean_salaries.append(industry.mean_salary)
	    median_salaries.append(industry.median_salaries)
	
	plt.scatter(mean_salaries, median_salaries)
	plt.show()
	
	plt.scatter(median_salaries, mean_salaries)
	plt.show()
gpt_feedback = You have several mistakes.
	
	1. You used `median_salaries` instead of `median_salary` from the `Industry` class.
	
	2. You have plotted `median_salaries` against `mean_salaries` twice, once in reverse order.
	
	3. You haven't labelled your axes or given your plot a title, which is a part of the task requirement.
	
	4. You haven't created two separate plots. One is supposed to show the relationship between `mean_salary` and `median_salary`, and the other is supposed to show the relationship between `mean_salary` and `members`.
	
	Try to plot `mean_salary` against `median_salary` and `mean_salary` against `members` in two different plots. Don't forget to put appropriate labels and title for your graph. Lastly, don't forget to import the necessary module for plotting (e.g., matplotlib.pyplot).
gpt_feedback_length = 110
gpt_score = 0.0
pedal_feedback = You have imported the <code class='pedal-name'>plt</code> module, but you did not rename it to <code class='pedal-name'>matplotlib.pyplot</code> using <code>import matplotlib.pyplot as plt</code>.
pedal_feedback_length = 21
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 1
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 2
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 2

[bakery_advanced_plotting_code_basic_scatter.Lapras_36250264.py]
student_code = 
	from bakery_salary import industries
	import matplotlib.pyplot as plt
	members = []
	mean = []
	median = []
	for industry in industries:
	    members.append(industry.members)
	    mean.append(industry.mean_salary)
	    median.append(industry.median_salary)
	plt.scatter(mean, median)
	plt.title('Mean vs Median')
	plt.ylabel('Median')
	plt.xlabel('Mean')
	plt.show()
	plt.scatter(mean, members)
	plt.title('Mean vs Members')
	plt.ylabel('Members')
	plt.xlabel('Mean')
	plt.show()
gpt_feedback = Your code looks great. You successfully created the two visualizations showing the relationships between mean salary and median salary and between mean salary and number of members. You've also correctly labeled the plots and axes.
gpt_feedback_length = 35
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'bakery_salary'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_advanced_plotting_code_basic_scatter/submissions/Lapras_36250264.py</code>
	<pre class='pedal-python-code python'><code>from bakery_salary import industries
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 1
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 1

[bakery_advanced_plotting_code_basic_scatter.Liepard_36306163.py]
student_code = 
	from bakery_salary import industries
	
	import matplotlib.pyplot as plt
	
	totalMS = []
	for industry in industries:
	    totalMS.append(industry.mean_salary / 1000)
	    
	plt.hist(totalMS)
	plt.xlabel("Mean Salary ($)")
	plt.ylabel("Industries")
	plt.title("Mean Salary of Industries")
	plt.show()
gpt_feedback = Your code is currently creating a single histogram of the mean salaries of the industries, which doesn't fulfill the requirements of the task. The task asked for two scatter plots: one for mean_salary vs median_salary and another one for mean_salary vs members. Scatter plots allow us to observe the relationship between two variables.
	
	You need to use plt.scatter() to create these scatter plots. Remember to separate the data for median salaries and members into their own lists, similar to how you did for mean salaries. Be sure to create two separate plots with the appropriate labels for each plot.
gpt_feedback_length = 98
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'bakery_salary'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_advanced_plotting_code_basic_scatter/submissions/Liepard_36306163.py</code>
	<pre class='pedal-python-code python'><code>from bakery_salary import industries
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 2
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 1

[bakery_advanced_plotting_code_basic_scatter.Nosepass_36799328.py]
student_code = 
	from bakery_salary import industries
	import matplotlib.pyplot as plt
	
	mean_sal = []
	med_sal = []
	members = []
	for industry in industries:
	    mean_sal.append(industry.mean_salary)
	    med_sal.append(industry.med_sal)
	    members.append(industry.members)
	    
	plt.scatter(mean_sal, med_sal)
	plt.title('Mean and Median Salaries (U.S. DOL 2021)')
	plt.xlabel('Mean Salary')
	plt.ylabel('Median Salary')
	plt.show()
	
	plt.scatter(mean_sal, Members)
	plt.title('Mean and Memebers Salaries (U.S. DOL 2021)')
	plt.xlabel('Mean Salary')
	plt.ylabel('Number of Members')
	plt.show()
gpt_feedback = Excellent start! You just made a typo. You used 'med_sal' instead of 'median_salary' in line 10. Besides that, Python is case-sensitive, hence 'Members' in line 18 should be 'members'. Correct these issues and your code should work perfectly.
gpt_feedback_length = 38
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>Members</code> was used on line 18, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 2
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_advanced_plotting_code_basic_scatter.Nuzleaf_38568583.py]
student_code = 
	from bakery_salary import industries
	import matplotlib.pyplot as plt
	
	mean_salary_list=[]
	for industry in industries:
	    mean_salary_list.append(industry.mean_salary/1000)
	median_salary_list=[]
	for industry in industries:
	    median_salary_list.append(industry.median_salary)
	members_list=[]
	for industry in industries:
	    members_list.append(industry.members)
	plt.scatter(mean_salary_list, median_salary_list)
	plt.xlabel("Mean Salary")
	plt.ylabel("Median Salary")
	plt.title("Mean Salary Compared to Median Salary")
	plt.show
	plt.scatter(mean_salary_list, members)
	plt.xlabel("Mean Salary")
	plt.ylabel("Members")
	plt.title("Mean Salary Compared to Members")
	plt.show
gpt_feedback = Your code is almost correct. You just forgot to define `members` as `members_list` while plotting the second graph. And don't forget to add brackets `()` after `plt.show` to actually display the graphs.
gpt_feedback_length = 32
gpt_score = 0.0
pedal_feedback = You have not called the <code>plt.show</code> function, which actually creates the graph.
pedal_feedback_length = 12
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 2

[bakery_for_composition_code_highest_filter]
description = Define the function `high_score` that consumes a list of integers (representing scores in a game) and produces an integer representing the highest score in the list. Ignore scores less than `100`, and stop processing values if you encounter `-999`. If the list is empty, return the value `None` instead. It is up to you to decompose this function (or not) however you want.

[bakery_for_composition_code_highest_filter.Beedrill_29030778.py]
student_code = 
	from bakery import assert_equal
	
	def high_score(scores: [int]) -> int:
	    if [i for i in scores if i >= 100] == []:
	        return None
	    to_return = 100
	    for score in scores:
	        if score == -999:
	            break
	        elif score >= to_return:
	            to_return = score
	    return to_return
	
	
	assert_equal(high_score([98, 100, 99, 101, -999, 102]), 101)
	assert_equal(high_score([]), None)
	assert_equal(high_score([70]), None)
gpt_feedback = Good job on trying to implement the high_score function. Your code handles cases where the list is empty and when scores are less than 100. However, there is a small mistake. In the 'for' loop where you judge scores, you are setting the 'to_return' variable to the initial 'score' when 'score' >= 'to_return'. This means, if the first score in your list is less than 100, your function will not work correctly, because 'to_return' is initialized to 100. Try to initialize 'to_return' to 0 and check if it is still 0 at the end of the loop. This will help you to return 'None' in case there are no scores above 100.
gpt_feedback_length = 112
gpt_score = 0.0
pedal_feedback = Student code failed instructor tests.
	You passed 6/8 tests.
	
	I ran your function <code class='pedal-name'>high_score</code> on some new arguments.
	<table class='pedal-table'>   <tr class='pedal-header'>
	    <th class='pedal-cell'></th>
	    <th class='pedal-cell'>Arguments</th>
	    <th class='pedal-cell'>Returned</th>
	    <th class='pedal-cell'>Expected</th>
	  </tr>     <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[100, 200, 300, -999]</code></pre></td>
	    <td class='pedal-cell'>300</td>
	    <td class='pedal-cell'>300</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[300, 200, 100, -999]</code></pre></td>
	    <td class='pedal-cell'>300</td>
	    <td class='pedal-cell'>300</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[300, 200, -999, 500, 400]</code></pre></td>
	    <td class='pedal-cell'>300</td>
	    <td class='pedal-cell'>300</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[400, 200, -999, 100, 200]</code></pre></td>
	    <td class='pedal-cell'>400</td>
	    <td class='pedal-cell'>400</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-negative-mark'>&#10060;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[-999, 400, 300, 50]</code></pre></td>
	    <td class='pedal-cell'>100</td>
	    <td class='pedal-cell'>None</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[-999]</code></pre></td>
	    <td class='pedal-cell'>None</td>
	    <td class='pedal-cell'>None</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-negative-mark'>&#10060;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[20, 40, 30, -999, 100]</code></pre></td>
	    <td class='pedal-cell'>100</td>
	    <td class='pedal-cell'>None</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[50, 200, -999, 50]</code></pre></td>
	    <td class='pedal-cell'>200</td>
	    <td class='pedal-cell'>200</td>
	  </tr></table>
pedal_feedback_length = 295
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 1
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 5

[bakery_for_composition_code_highest_filter.Buizel_29317817.py]
student_code = 
	from bakery import assert_equal
	
	def high_score(scores: list[int]) -> int:
	    high = scores[0]
	    for score in scores:
	        if score > high:
	            high = score
	    return high
gpt_feedback = You've written a function that gets the highest score from the list, but the function doesn't fulfill all the requirements from the prompt. The problems are:
	
	1. You need to only consider scores which are more than or equal to 100.
	2. You need to stop processing if you encounter the number -999.
	3. If the list is empty, you need to return None. You can do this by checking if 'scores' is empty at the start of your function.
	
	Try to update your function considering these points.
gpt_feedback_length = 84
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 1

[bakery_for_composition_code_highest_filter.Darumaka_29509864.py]
student_code = 
	from bakery import assert_equal
	
	
	def high_score (scores:list[int])->int:
	    maximum=score[0]
	    for score in scores:
	        if score > maximum:
	            if score < 100:
	                return None 
	            maximum=score
	    return maximum
	
	assert_equal(high_score([500,50]), 500)
gpt_feedback = Your code seems to be on the right track but has a few issues. First, you reference `score[0]` before declaring `score`. This would give an error. Second, the condition `if score < 100: return None` will return `None` whenever a score less than 100 is encountered, which is not the task requirement. You should ignore scores less than 100, not return `None`. Finally, remember to account for the `-999` condition and the empty list situation as these are important parts of the problem.
gpt_feedback_length = 83
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>score</code> was used on line 5, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 1
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 2

[bakery_for_composition_code_highest_filter.Elgyem_27313994.py]
student_code = 
	from bakery import assert_equal
	def high_score(scores: [int])->int:
	
	max_num = scores[0]
	
	mini = 100
	
	empty_list = []
	
	if scores == empty_list:
	    return None
	for score in scores:
	    if score==-999:
	        return max_num
	    if score < mini:
	        continue
	    if score == -999:
	        break
	    if score > max_num:
	        max_num = score
	        return max_num
	
	assert_equal(high_score([300, 40, 200, 150]), 300)
	
	assert_equal(high_score([50, 100, 400, -999]), 400)
	
	assert_equal(high_score([600, 800,]), 800)
	
	assert_equal(high_score([300, 200, -999, 400]), 300)
gpt_feedback = There are a few bugs in your code. Firstly, you are returning max_num immediately after finding a score that is greater than the current max_num. This should not be the case, you should only return max_num after you have iterated over all scores or hit the value -999. You should also remove the duplicate check for -999. Finally, rather than checking if the scores list is the same as an empty list, you can use len(scores) == 0 or not scores.
gpt_feedback_length = 81
gpt_score = 0.0
pedal_feedback = Bad indentation on line 4 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_for_composition_code_highest_filter/submissions/Elgyem_27313994.py</code>
	<pre class='pedal-python-code python'><code>max_num = scores[0]
	^</code></pre>
	</div>
	Expected an indented block after function definition on line 2.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 44
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_for_composition_code_highest_filter.Girafarig_28396215.py]
student_code = 
	from bakery import assert_equal
	
	def high_score(scores: list[int]) -> int:
	    if not scores:
	        return None
	    highest_score = scores[0]
	    taking = True
	    for score in scores:
	        if -999 == score:
	            taking = False
	        elif taking and score >= 100 and score > highest_score:
	            highest_score = score
	    if highest_score < 100:
	        return None
	    return highest_score
	
	assert_equal(high_score([101, 150, 175, -10, 53]), 175)
	assert_equal(high_score([52, 63]), None)
	assert_equal(high_score([105, -999, 175, -10, 53]), 105)
	assert_equal(high_score([]), None)
gpt_feedback = Your solution looks correct. It's using an iteration to go through the scores and updating the `highest_score` when necessary. The tests passed and your function seems to be handling all edge cases correctly including empty list and -999 stopping rule. Keep up the good work!
gpt_feedback_length = 45
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_for_composition_code_highest_filter.Lapras_28139989.py]
student_code = 
	from bakery import assert_equal
	def high_score(List:list[int])-> int:
	    max = List[0]
	    cont_count = True
	    for nums in List:
	        if nums == -999:
	            cont_count = False
	            if nums >=100:
	                max = nums
	    return max
	
	assert_equal(high_score([150, -999, 200]), 150)
gpt_feedback = There seems to be an issue with your logic in determining the maximum value in your list. Also, make sure the function returns None when the list is empty. Furthermore, your 'if' statements for checking '-999' and ignoring values less than '100' are not properly aligned, thereby affecting the logic of your computation.
gpt_feedback_length = 53
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>cont_count</code> was given a value on line 6, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 4
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 2
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 2

[bakery_for_composition_code_highest_filter.Liepard_28823730.py]
student_code = 
	from bakery import assert_equal
	
	def high_score(integers: list[int]) -> int:
	    highest = integers[0]
	    if len(integers) > 0:
	        for integer in integers:
	            if integer == -999:
	                return None
	            if integer >= 100:
	                if highest < integer:
	                    highest = integer
	        return highest
gpt_feedback = You're almost there! However, your function will fail when the list is empty because you're trying to assign the first element of an empty list to your 'highest' variable. You should only assign the first element to 'highest' if the list is not empty, after checking the list size. Another issue with your function is that when encountering '-999', you return None. According to the problem, the function should stop processing the values, not return None. It should return None only if the list is empty.
gpt_feedback_length = 86
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 2

[bakery_for_composition_code_highest_filter.Nosepass_28623443.py]
student_code = 
	from bakery import assert_equal
	
	def filter_scores(scores: list[int])->list[int]:
	    #filter the scores
	    New_Scores = []
	    for score in scores:
	        if score == -999:
	            return New_Scores
	        if score > 100:
	            New_Scores.append(score)
	    return New_Scores
	
	def high_score(raw_scores: list[int])->int:
	    scores = filter_scores(raw_scores)
	    if not scores:
	        return None
	    max_s = scores[0]
	    for score in score:
	        if score > max_s:
	    return max_s
	
	assert_equal(filter_scores([1,-999,300]),[])
	assert_equal(filter_scores([1,300,500]),[300,500])
	assert_equal(filter_scores([1000,300,101]),[1000,300,101])
	
	assert_equal(high_score([1,-999,300]),None)
	assert_equal(high_score([300,200,3000]),3000)
	assert_equal(high_score([101,3,54]),101)
gpt_feedback = Your filter_scores function seems to be working correctly, as it's correctly handling the -999 and ignores scores less than 100. However, there are two issues in the high_score function. Firstly, you've made a typo in the 'for' loop: you're trying to iterate over 'score' instead of 'scores'. Secondly, inside your loop, you're missing indented code block after the 'if' statement. You're probably trying to assign the higher value to 'max_s', but the code currently isn't there.
gpt_feedback_length = 76
gpt_score = 0.0
pedal_feedback = Bad indentation on line 20 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 20 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_for_composition_code_highest_filter/submissions/Nosepass_28623443.py</code>
	<pre class='pedal-python-code python'><code>    return max_s
	   ^</code></pre>
	</div>
	Expected an indented block after 'if' statement on line 19.
	Suggestion: Check line 20, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 50
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 2

[bakery_for_composition_code_highest_filter.Nuzleaf_32379968.py]
student_code = 
	from bakery import assert_equal
	
	def no_less_than_100(numbers:list[int])->list[int]:
	    stitch=[]
	    for number in numbers:
	        if number>=100:
	            stitch.append(number)
	    return stitch
	
	def maximum(numbers:list[int])->int:
	    purple=numbers[0]
	    for number in numbers:
	        if purple<number:
	            purple=number
	    return purple
	
	def
	        
	def high_score(numbers:list[int])->int:
	    x=no_less_than_100(numbers)
	    if not numbers:
	        return None   
	    taking=True
	    lilo=[]
	    for number in x:
	    if number==-999:
	        taking=False
	    elif taking:   
	        lilo.append(number)
	    return maximum(lilo)
	    
	assert_equal(high_score([]), None)
	assert_equal(high_score([99,2,101,100]), 101)
	assert_equal(high_score([5,-999]), 0)
gpt_feedback = The code is almost correct! Just a couple of issues to fix. You start defining another function after `maximum` and then do not finish it - if this was unintended then please remove the `def` statement. Additionally, you have an indendation error in your `high_score` function - you forgot to indent the code within your `for` loop. It's crucial that you maintain correct indentation - in Python, it determines the grouping of statements.
gpt_feedback_length = 73
gpt_score = 0.0
pedal_feedback = Bad syntax on line 17.
	
	The traceback was:
	<div class='pedal-traceback'>Line 17 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_for_composition_code_highest_filter/submissions/Nuzleaf_32379968.py</code>
	<pre class='pedal-python-code python'><code>def
	   ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 17, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 34
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 2
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 2

[bakery_functions_flow_code_timely_extraction]
description = <p>The functions below calculate whether a given hour is in the morning (between 5am <em>and</em> 12pm). The first function <code>is_morning</code> (incomplete) has two helper functions (<code>is_past_dawn</code> and <code>is_before_noon</code>, both complete). Finish the <code>is_morning</code> function to call the other two.</p>

[bakery_functions_flow_code_timely_extraction.Beedrill_18988758.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return is_past_dawn(hour) and is_before_noon(hour)
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = Great job! Your code correctly checks if a given hour is in the morning by using and combining the helper functions `is_past_dawn` and `is_before_noon`. Your tests also correctly validate the functionality of your code. Keep it up!
gpt_feedback_length = 37
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_functions_flow_code_timely_extraction/submissions/Beedrill_18988758.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 2
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 1

[bakery_functions_flow_code_timely_extraction.Buizel_20306146.py]
student_code = 
	from bakery import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return ___
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = Looks like you're on the right track! Inside the is_morning function, you should be making calls to both the is_past_dawn and is_before_noon functions. By combining the results of these two function calls, you can figure out if the given hour falls in the morning range or not.
gpt_feedback_length = 47
gpt_score = 0.0
pedal_feedback = It looks like you have unconnected blocks on line 10. Before you run your program, you must make sure that all of your blocks are connected that there are no unfilled holes.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 2
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 3

[bakery_functions_flow_code_timely_extraction.Darumaka_20596757.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return hour 
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = Your function `is_morning(hour: int) -> bool:` is currently only retuning the hour input. You need to use this hour to check if it is past dawn and before noon, you have helper methods for both these checks. Call these methods inside `is_morning` and return the result when both of these conditions are true.
gpt_feedback_length = 53
gpt_score = 0.0
pedal_feedback = Your function returned an integer on line 12, even though you defined it to return a boolean. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 5

[bakery_functions_flow_code_timely_extraction.Elgyem_18650843.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return ___
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = For the `is_morning` function, you need to check whether the given hour meets the conditions of both being past dawn and before noon. Therefore, you should call `is_past_dawn(hour)` and `is_before_noon(hour)` inside your function and make sure both are true. In Python, you can use 'and' operator to check if both conditions are met.
gpt_feedback_length = 53
gpt_score = 0.0
pedal_feedback = It looks like you have unconnected blocks on line 10. Before you run your program, you must make sure that all of your blocks are connected that there are no unfilled holes.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 2
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 3

[bakery_functions_flow_code_timely_extraction.Girafarig_19721299.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return is_past_dawn(hour) and is_before_noon(hour)
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = Excellent job! You have correctly utilized the 'is_past_dawn' and 'is_before_noon' helper functions to determine the passed hour is in the morning. The function 'is_morning' returns True only when 'is_past_dawn' and 'is_before_noon' both are True, which reflects the correct logic to check a given hour is in the morning. Your test cases are comprehensive and well-considered.
gpt_feedback_length = 55
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_functions_flow_code_timely_extraction/submissions/Girafarig_19721299.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 1

[bakery_functions_flow_code_timely_extraction.Lapras_20074571.py]
student_code = 
	from bakery import assert_equal
	
	def is_morning(hour: int) -> bool:
	    def is_before_noon(hour: int) -> bool:
	    return hour <= 12    
	    def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	
	
	
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = In the function is_morning you're supposed to call the functions is_past_dawn and is_before_noon. Both functions are defined and correct, but your is_morning function doesn't currently do anything, which is why the assert_equal statements are failing. You should update is_morning so that it returns True if and only if the hour is past dawn (5 AM) and before noon (12 PM).
gpt_feedback_length = 60
gpt_score = 0.0
pedal_feedback = Bad indentation on line 5 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 5 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_functions_flow_code_timely_extraction/submissions/Lapras_20074571.py</code>
	<pre class='pedal-python-code python'><code>    return hour <= 12    
	    ^</code></pre>
	</div>
	Expected an indented block after function definition on line 4.
	Suggestion: Check line 5, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 57
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 3

[bakery_functions_flow_code_timely_extraction.Liepard_19874187.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return is_past_dawn(hour) and is_before_noon(hour)
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = Your code seems to be working as expected and you have successfully implemented the 'is_morning' function using the 'is_past_dawn' and 'is_before_noon' helper functions. It's also good to see that you've tested your function with different time points to ensure correctness. Good job!
gpt_feedback_length = 42
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_functions_flow_code_timely_extraction/submissions/Liepard_19874187.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 2
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 3

[bakery_functions_flow_code_timely_extraction.Nosepass_19326157.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return is_past_dawn or is_before_noon
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = In the function 'is_morning', you are returning the function objects 'is_past_dawn' and 'is_before_noon' instead of the result of calling them. You need to call these functions with 'hour' as the argument to get the respective boolean values. The 'is_morning' function should return True only if both 'is_past_dawn' and 'is_before_noon' functions return True.
gpt_feedback_length = 52
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>hour</code> was given a value on line 9, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 4
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 4

[bakery_functions_flow_code_timely_extraction.Nuzleaf_25659450.py]
student_code = 
	from bakery import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return is_before_noon or is_past_dawn
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = The problem in your `is_morning` function is that you are returning the functions `is_before_noon` and `is_past_dawn` themselves, not the results of calling those functions with the input `hour`. The return statement in your function should look like this: `return is_before_noon(hour) and is_past_dawn(hour)`. Try making this adjustment to your code and run the test cases again.
gpt_feedback_length = 55
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>hour</code> was given a value on line 9, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 4
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 4

[bakery_if_patterns_make_pig_latin]
description = Define a function `make_pig_latin` that consumes a word (a string) and converts it to actual pig latin (also a string). If the first letter of the word is a vowel, just return that word with `"ay"` added to the end. Otherwise, take the first character of the word and move it to the end of the string, and *then* add `"ay"` to the end. Do not worry about capitalization. If the empty string is given, return `"ay"`.

[bakery_if_patterns_make_pig_latin.Beedrill_21205343.py]
student_code = 
	def make_pig_latin(word: str) -> str:
	    if word[0].lower() in "aeiou":
	        return word + "ay"
	    else:
	        return word[1:] + word[0] + "ay"
	
	print("TEST PASSED")
	print("TEST PASSED")
	print("TEST PASSED")
gpt_feedback = Your implementation of the function make_pig_latin seems correct for the cases when words begin with a vowel or consonant but it misses handling the case of an empty string. What will happen if 'word' is an empty string? The program will crash because you're trying to access the first character of an empty string. Make sure to add a condition to handle it.
gpt_feedback_length = 63
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>make_pig_latin</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 2
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 2

[bakery_if_patterns_make_pig_latin.Buizel_22898628.py]
student_code = 
	from cisc108 import assert_equal
	
	def make_pig_latin(word: str) -> str:
	    if word[0] in "AEIOUaeiou"
	        return word + "ay"
gpt_feedback = Your function only takes care of the case where the first letter of the word is a vowel. You also need to cover the case where the first letter is not a vowel as per the problem requirements. Additionally, there is a syntax error present. The colon is missing after the 'if' condition.
gpt_feedback_length = 53
gpt_score = 0.0
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Buizel_22898628.py</code>
	<pre class='pedal-python-code python'><code>    if word[0] in "AEIOUaeiou"
	                              ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 68
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 5

[bakery_if_patterns_make_pig_latin.Darumaka_23539066.py]
student_code = 
	vowel=a
	
	def make_pig_latin (word:str)->str:
	    if word [:0] vowel
	    return word+"ay"
	#else:
	#    return wor
gpt_feedback = You have a syntax error in your `if` statement line. If you want to check whether the first character of the word is a vowel, you should use the `in` keyword. Also, remember to use the `==` operator to compare values. Finally, you need to slice the string correctly to get the first letter. For example: `if word[0] in vowel:`. Also, don't forget to complete your `else` section.
gpt_feedback_length = 68
gpt_score = 0.0
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Darumaka_23539066.py</code>
	<pre class='pedal-python-code python'><code>    if word [:0] vowel
	                 ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 55
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 2
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 2
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 1

[bakery_if_patterns_make_pig_latin.Elgyem_20565700.py]
student_code = 
	from cisc108 import assert_equal
	def make_pig_latin(word:str)->str:
	     if word[0].lower()in "aeiou"
	        return word+"ay"
	    else
	        return word[1:]+word[0]+"ay"
	        
	assert_equal(make_pig_latin(word),ordway)
gpt_feedback = You are missing colon from end of 'if' and 'else' statements. Also, you are trying to assert equal 'make_pig_latin(word)' by passing 'word' as a parameter without defining it before. It is also not clear what 'ordway' is. You should compare it with expected result like `'worday'` instead.
gpt_feedback_length = 47
gpt_score = 0.0
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Elgyem_20565700.py</code>
	<pre class='pedal-python-code python'><code>     if word[0].lower()in "aeiou"
	                                 ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 71
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 3

[bakery_if_patterns_make_pig_latin.Girafarig_21526564.py]
student_code = 
	from cisc108 import assert_equal
	
	def make_pig_latin(word: str) -> str:
	    if word[0] in 'aeiou':
	        return word + 'ay'
	    return word[1:] + word[0] + 'ay'
	
	assert_equal(make_pig_latin("hello"), "elloay")
	assert_equal(make_pig_latin("arugula"), "arugulaay")
	assert_equal(make_pig_latin("potato"), "otatopay")
	assert_equal(make_pig_latin("green"), "reengay")
gpt_feedback = Great job! Your function seems to handle words starting with a vowel or a consonant just fine. However, you have missed handling one case that the problem specifies - when the input string is empty. Try updating your code to handle that scenario.
gpt_feedback_length = 43
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Girafarig_21526564.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 1
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 1

[bakery_if_patterns_make_pig_latin.Lapras_21931235.py]
student_code = 
	from bakery import assert_equal
	def make_pig_latin(Word:str)->str:
	    if Word[0] in "aeiouAEIOU":
	        pig_latin = Word + "ay"
	    elif Word[0] not in "aeiouAEIOU" and "":
	        pig_latin = Word[1:] + Word[0] +"ay"
	    else:
	            pig_latin = "ay"
	    return pig_latin
	
	assert_equal(make_pig_latin("Fiammetta"), "iamettaFay")       
	assert_equal(make_pig_latin(""), "ay")
	assert_equal(make_pig_latin("Exusiai"), "Exusiaiay")
gpt_feedback = Your code logic looks good, but the check for an empty string in the elif statement seems a bit misplaced. The condition 'and ""' does not actually check for an empty string. Instead, consider checking if the string is not empty before proceeding with the rest of your code.
gpt_feedback_length = 49
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	An IndexError occurred:
	
	<pre class='pedal-exception'>String index out of range</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Lapras_21931235.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(make_pig_latin(""), "ay")
	             ^^^^^^^^^^^^^^^^^^</code></pre>
	
	Line 3 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Lapras_21931235.py</code> in <code class='pedal-frame'>make_pig_latin</code>
	<pre class='pedal-python-code python'><code>    if Word[0] in "aeiouAEIOU":
	       ^^^^^^^</code></pre>
	</div>
	An IndexError means that you indexed past the end of a string or a list.  For example, if you access index 5 in a list with 3 items.
	
	Suggestion: Remember that the first position in a list or string is 0. Often, you will be off by just one index position, so check your math. Also, make sure the list or string has the right value.
pedal_feedback_length = 124
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 1
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 4
instructor_feedback_pedal_sentiment = 2

[bakery_if_patterns_make_pig_latin.Liepard_21631305.py]
student_code = 
	from cisc108 import assert_equal
	
	def make_pig_latin(word: str) -> str:
	    if word[0] in "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ":
	        return word + "ay"
gpt_feedback = It appears your function is currently adding 'ay' to the end of any word regardless of whether it starts with a vowel or not. Remember, if the word starts with a consonant, you should move that first letter to the end of the word before appending 'ay'. Additionally, you also need to handle the edge case when an empty string is given.
gpt_feedback_length = 62
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 1

[bakery_if_patterns_make_pig_latin.Nosepass_22110513.py]
student_code = 
	from cisc108 import assert_equal
	
	def make_pig_latin(word: str)->str:
	    vowels = ["A","E","I","O","U"]
	    if not word:
	        return "ay"
	    elif word[0].upper() in vowels:
	        return word + "ay"
	    return word[1:] + word[0] + "ay"
	
	assertequal(make_pig_latin(""),"ay")
	assertequal(make_pig_latin("effort"),"effortay")
	assertequal(make_pig_latin("make"),"akemay")
	assertequal(make_pig_latin("word"),"ordway")
	assertequal(make_pig_latin("award"),"awarday")
gpt_feedback = You're on the right track, but your assertion function is not used correctly. You've used `assertequal` instead of `assert_equal`. Please replace `assertequal` with `assert_equal` and your code should work correctly.
gpt_feedback_length = 30
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>assertequal</code> was used on line 11, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 4

[bakery_if_patterns_make_pig_latin.Nuzleaf_27538944.py]
student_code = 
	from cisc108 import assert_equal
	
	def make_pig_latin(word:str)->str:
	    if word==""
	        return "ay"
	    elif word[0] in "aeiou":
	        return word+"ay"
	    else:
	        return word[1:]+word[0]+"ay"
gpt_feedback = There is a syntax error in the first line of your function. Remember that in Python, you need to use double equals '==' for comparison operations. So, instead of 'if word==""', it should be 'if word == ""'.
gpt_feedback_length = 38
gpt_score = 0.0
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Nuzleaf_27538944.py</code>
	<pre class='pedal-python-code python'><code>    if word==""
	               ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 51
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 5

[bakery_intro_import_code_import_variable]
description = The file `my_second_module.py` is available to be imported into your program, and contains a string variable named `art`. Import the variable from the module, and print its contents.

[bakery_intro_import_code_import_variable.Beedrill_16150346.py]
student_code = 
	import art from my_second_module
gpt_feedback = You seem to have confused the correct syntax for importing a specific variable from a module in Python. The correct syntax is `from module_name import variable_name`. In your case, it should be `from my_second_module import art`.
gpt_feedback_length = 36
gpt_score = 0.0
pedal_feedback = Bad syntax on line 1.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_intro_import_code_import_variable/submissions/Beedrill_16150346.py</code>
	<pre class='pedal-python-code python'><code>import art from my_second_module
	           ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 45
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 4
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 1
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 3

[bakery_intro_import_code_import_variable.Buizel_17811305.py]
student_code = 
	from my_second_module.py import art
gpt_feedback = You are close, but remember that when importing in Python, you don't need to include the '.py' extension of the file. You just need to use the name of the module. So it should be 'from my_second_module import art'.
gpt_feedback_length = 39
gpt_score = 0.0
pedal_feedback = You should not have the `.py` part of the filename in your `import` statement. Only use the name of the module on its own!
pedal_feedback_length = 24
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_import_code_import_variable.Darumaka_17744727.py]
student_code = 
	art = """
	⁣          🎈🎈  ☁️
	         🎈🎈🎈
	 ☁️     🎈🎈🎈🎈
	        🎈🎈🎈🎈
	   ☁️    ⁣🎈🎈🎈
	           \|/
	           🏠   ☁️
	   ☁️         ☁️
	
	🌳🌹🏫🌳🏢🏢_🏢🏢🌳🌳
	print(""")
gpt_feedback = You are supposed to import the string variable `art` from the file `my_second_module.py` and then print it out. `Import` in Python allows you to use functions, variables etc. from another Python file. To import a specific variable from a Python file, you can use the `from module_name import variable_name` syntax. Once you've finished importing, use the Python command `print(variable_name)` to print out the string.
gpt_feedback_length = 64
gpt_score = 0.0
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_intro_import_code_import_variable/submissions/Darumaka_17744727.py</code>
	<pre class='pedal-python-code python'><code>print(""")
	         ^</code></pre>
	</div>
	Unmatched ')'.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 40
pedal_score = 0
instructor_feedback_gpt_accurate = 3
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 3
instructor_feedback_pedal_clear = 2
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 2

[bakery_intro_import_code_import_variable.Elgyem_16229137.py]
student_code = 
	import file
	
	print("art",my_second_module.py)
gpt_feedback = You want to import the `my_second_module`, not `file`. Also, you should reference the variable `art` properly from `my_second_module`. To do this, you would typically use the syntax module.variable. In this case, it would look like my_second_module.art. Try adjusting your code to import the correct module and correctly reference the `art` variable.
gpt_feedback_length = 51
gpt_score = 0.0
pedal_feedback = You should not have the `.py` part of the filename in your `import` statement. Only use the name of the module on its own!
pedal_feedback_length = 24
pedal_score = 0
instructor_feedback_gpt_accurate = 3
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_intro_import_code_import_variable.Girafarig_18042275.py]
student_code = 
	from my_secon_module import art
	print(art)
gpt_feedback = There might be a typing error in your code. You should import from `my_second_module` instead of `my_secon_module`. Check the spelling and try again.
gpt_feedback_length = 23
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'my_secon_module'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_intro_import_code_import_variable/submissions/Girafarig_18042275.py</code>
	<pre class='pedal-python-code python'><code>from my_secon_module import art
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 4
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 3

[bakery_intro_import_code_import_variable.Lapras_17636639.py]
student_code = 
	import my_second_module.py 
	print (art)
gpt_feedback = Good attempt, but there are a couple of mistakes. When importing modules in python, you don't need to include the '.py' extension, you just mention the module name. Secondly, you need to use the module name when referencing variables defined in that module. Try using the syntax `module_name.variable_name` to access the `art` variable from `my_second_module`.
gpt_feedback_length = 55
gpt_score = 0.0
pedal_feedback = You should not have the `.py` part of the filename in your `import` statement. Only use the name of the module on its own!
pedal_feedback_length = 24
pedal_score = 0
instructor_feedback_gpt_accurate = 3
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 3

[bakery_intro_import_code_import_variable.Liepard_18047518.py]
student_code = 
	from my_second_module.py import art
	print(art)
gpt_feedback = While importing your module, remember that you don't need to include '.py' extension. Try `from my_second_module import art` instead.
gpt_feedback_length = 19
gpt_score = 0.0
pedal_feedback = You should not have the `.py` part of the filename in your `import` statement. Only use the name of the module on its own!
pedal_feedback_length = 24
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_import_code_import_variable.Nosepass_16621124.py]
student_code = 
	import my_second_module.py
	print(art)
gpt_feedback = You're on the right track with trying to import the module in Python, but the syntax could use some revision. When importing a module in Python, you shouldn't include the '.py' at the end. Also, when accessing a variable from an imported module, you should mention the module name. Therefore, try to access the 'art' variable as 'my_second_module.art'.
gpt_feedback_length = 58
gpt_score = 0.0
pedal_feedback = You should not have the `.py` part of the filename in your `import` statement. Only use the name of the module on its own!
pedal_feedback_length = 24
pedal_score = 0
instructor_feedback_gpt_accurate = 3
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 3
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_intro_import_code_import_variable.Nuzleaf_22980678.py]
student_code = 
	from my_second_module.py import art
	print (art)
gpt_feedback = You need to import from the module without the extension '.py'. Your code should be 'from my_second_module import art'. Give it another shot.
gpt_feedback_length = 23
gpt_score = 0.0
pedal_feedback = You should not have the `.py` part of the filename in your `import` statement. Only use the name of the module on its own!
pedal_feedback_length = 24
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 4
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 4

[bakery_intro_programs_code_try_blockpy]
description = Hello, and welcome to BlockPy! This tool will let you write and run  Python code.
	
	Below, you can see the code editor where there is already a bit of code.
	
	Click the green "Run" button to see the result of running your  code in the "Console" and "Feedback" areas.
	
	When you see the green "Complete" box, you've completed this problem!

[bakery_intro_programs_code_try_blockpy.Beedrill_15803943.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Good job! The code prints the message 'Welcome to BlockPy!' as expected. Keep practicing and experimenting with Python code.
gpt_feedback_length = 19
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Buizel_16401118.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Great work! You've correctly implemented the print function to output the 'Welcome to BlockPy!' statement.
gpt_feedback_length = 15
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Darumaka_16967377.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Great job! Your code runs successfully and prints out the intended message correctly.
gpt_feedback_length = 13
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Elgyem_15701933.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Good job! Your print statement is correct and it will display the message 'Welcome to BlockPy!' when run.
gpt_feedback_length = 18
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Girafarig_16114772.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Good job! Your code has run successfully without any errors and has printed the message 'Welcome to BlockPy!' as intended.
gpt_feedback_length = 20
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Lapras_16280492.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Great job! Your code runs perfectly and prints out the welcome message as expected. Keep practicing to become more proficient in Python.
gpt_feedback_length = 22
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Liepard_16523595.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Great start! You have successfully used the print function to display a message. Remember, you can use the print function to display any string, integer, or variable.
gpt_feedback_length = 27
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Nosepass_15790367.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Great job! The print() function is well implemented, and your string is correctly formatted.
gpt_feedback_length = 14
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_intro_programs_code_try_blockpy.Nuzleaf_22476432.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Your code seems to be correct! Keep on practicing.
gpt_feedback_length = 9
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_nesting_list_dataclasses_code_good_job]
description = The dataclass `Job` is defined below with the fields `title` (str), `salary` (int), `available` (boolean), and `company` (str).
	
	Define a function `best_job` that consumes a list of jobs and returns the `Job` with the highest `salary` that is `available`. If no jobs are available, then return the default `UNEMPLOYED` job instead.
	
	You will need to unit test your code a sufficient number of times.
	
	**HINT**: Define a helper function to filter out the unavailable jobs BEFORE you determine the highest salary `Job`. An `if` statement used as a Defensive Guard will be very effective for returning the appropriate value in the case where there are no available guards. Having two helper functions (one to filter available jobs, and one to determine the highest salary) in addition to the main `best_job` function makes this a lot easier to keep track of everything.

[bakery_nesting_list_dataclasses_code_good_job.Beedrill_31352318.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def best_job(jobs: [Job]) -> Job:
	    if not [job for job in jobs if job.available]:
	        return UNEMPLOYED
	    return max([job for job in jobs if job.available], key=lambda job: job.salary)
gpt_feedback = Your code looks good! You have shown understanding of both dataclasses and list comprehensions in Python. Also, opting to use the max function to find the job with the highest salary was a smart decision. Your use of a lambda function was also a smart way to specify what attribute to consider in the max function.
gpt_feedback_length = 56
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 2, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 4
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_nesting_list_dataclasses_code_good_job.Buizel_31739575.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
gpt_feedback = Great start! You've correctly defined your dataclass and your 'UNEMPLOYED' instance. Now, you will need to define your `best_job` function as per the instructions of the problem. Remember, a helper function to filter out the unavailable jobs might be useful.
gpt_feedback_length = 40
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 2, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 4
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_nesting_list_dataclasses_code_good_job.Darumaka_31747902.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def available(avail:[Job])->bool:
	    taking = []
	    for avai in avail:
	        if avail.available is True:
	            taking.append(avai)
	    return False
	
	Job1 = [Job("banker", 5, True, "PNC")]
	assert_equal(available(Job1), [Job("banker", 5, True, "PNC")])
gpt_feedback = It seems like you are trying to return only available jobs in your 'available' function, but instead you are returning `False` at the end. Try changing `return False` to `return taking` since `taking` is the list you are storing the available jobs in. Also, when referencing an object in a for loop, make sure you use the object instance 'avai' instead of the list name 'avail'. It should be `if avai.available is True:`, not `if avail.available is True:`.
gpt_feedback_length = 78
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>taking</code> was given a value on line 16, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 2
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_nesting_list_dataclasses_code_good_job.Elgyem_30552172.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	def can(have:list[Job])->bool:
	    new_list=[]
	    for h in have:
	        if h.available==True:
	            new_list.append(h)
	    return new_list
	
	def highest(
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
gpt_feedback = This is a good start but your function 'can' currently returns a bool value (True/False) while it should return a list of available jobs. You also need to write another helper function to find a job with the highest salary. Moreover, your main function 'best_job' is missing. It should combine 'can' and the 'highest salary' function to return the job with the highest salary and is available. If no job is available, it should return the 'UNEMPLOYED' job.
gpt_feedback_length = 78
gpt_score = 0.0
pedal_feedback = Bad syntax on line 18.
	
	The traceback was:
	<div class='pedal-traceback'>Line 18 of file <code class='pedal-filename'>C:\Users\johna\Documents\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_nesting_list_dataclasses_code_good_job/submissions/Elgyem_30552172.py</code>
	<pre class='pedal-python-code python'><code>def highest(
	           ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 18, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 45
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 2
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 3

[bakery_nesting_list_dataclasses_code_good_job.Girafarig_31362083.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def best_job(jobs: list[Job]) -> Job:
	    greatest_job = UNEMPLOYED
	    for job in jobs:
	        if job.available:
	            if job.salary > greatest_job.salary:
	                greatest_job = job
	    return greatest_job
	
	
	painter = Job("Painter", 5000, True, "Painers Inc.")
	seamstress = Job("Seamstress", 4000, False, "Sewing and Strings")
	server = Job("waiter", 3500, False, "Bob's")
	
	assert_equal(best_job([painter, seamstress, waiter]), 8500)
	assert_equal(best_job([waiter]), UNEMPLOYED)
	assert_equal(best_job([painter]), 5000)
gpt_feedback = You're almost there! I noticed two main issues with your code.
	
	1. In the first and third assert_equal statements, you expected the output of the best_job function to be an integer (8500 and 5000 respectively). The function best_job, however, should return a Job object.
	
	2. It seems like you're using the name 'waiter' when you define a Job object, but you defined the job as 'server'. You should be consistent with the names.
gpt_feedback_length = 71
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>waiter</code> was used on line 26, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 4
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 4

[bakery_nesting_list_dataclasses_code_good_job.Lapras_30790908.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def best_job(jobs:[Job])-> Job:
	    greatest_job = UNEMPLOYED.salary
	    for job in jobs:
	        if job.salary > greatest_job:
	            if job.available:
	                greatest_job = job.salary
	    return greatest_job
	
	jobslist = [Job('Legend', 0, False, 'Earth'),
	            Job('Garbageman', 30_000, True, 'City'),
	            Job('Lawyer', 400_000, False, 'City'),
	            Job('Plumber', 75_000, True, 'City')]
	assert_equal(best_job(jobslist), 75_000)
	assert_equal(best_job([]), 0)
	assert_equalassert_equal(best_job(jobslist[:-1]), 30_000)
gpt_feedback = It seems like you're returning the highest salary instead of the job with the highest salary. The `best_job` function should return a `Job` object not just the salary. Also you need to update your greatest_job to the Job object instead of greatest salary. Your assert_equal should compare the returned job's title, not its salary. For instance, `assert_equal(best_job(jobslist).title, 'Plumber')`
gpt_feedback_length = 58
gpt_score = 0.0
pedal_feedback = Your function returned an integer on line 25, even though you defined it to return A Job. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 3
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 4
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 4

[bakery_nesting_list_dataclasses_code_good_job.Liepard_31859101.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def best_job(jobs: list[Job]) -> Job:
	    highestPay = 0
	    jobTitle = ""
	    for job in jobs:
	        if job.available == False:
	            if job.salary > highestPay:
	                highestPay = job.salary
	                jobTitle = job.title
	    return jobTitle
gpt_feedback = You have a good start but there are a few things to address. First, your function should be returning a `Job` object, not just the title of the job. Second, the way your logic is set up now, you're checking if the job available is False, yet you're supposed to be looking for the highest paying job only among available jobs. Try to reverse your if condition. Lastly, make use of defensive programming to return the `UNEMPLOYED` job when there is no available job with the highest salary.
gpt_feedback_length = 88
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 2, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 2

[bakery_nesting_list_dataclasses_code_good_job.Nosepass_31444935.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	def filter_un(Jobs: list[Job])->list[Job]:
	    avalible_jobs = []
	    for job in Jobs:
	        if job.avalible:
	            avalible_jobs.append(job)
	    return avalible_jobs
	
	def best_job(Jobs: list[Job])->Job:
	    largest_salary = 0
	    filtered_jobs = filter_un(Jobs)
	    
	    if not filtered_jobs:
	        return Job("Unemployed", 0, True, "None")
	    
	    best_job = filtered_jobs[0]
	    for job in Jobs:
	        if job.salary > best_job.slary:
	            best_job = job
	    return best_job
	
	assert_equal(best_job([Job("Unemployed", 0, True, "None"),Job("Software Developer", 500000, False, "Google"),Job("TA",5,True,"Uni")]),Job("TA",5,True,"Uni"))
	assert_equal(best_job([Job("Unemployed", 0, True, "None"),Job("Software Developer", 500000, True, "Google"),Job("TA",5,True,"Uni")]),Job("Software Developer", 500000, True, "Google"))
	assert_equal(best_job([Job("Unemployed", 0, False, "None"),Job("Software Developer", 500000, False, "Google"),Job("TA",5,True,"Uni")]),Job("Unemployed", 0, True, "None"))
gpt_feedback = The variable name `avalible` in your filter_un function is probably a typo and should be `available`. Python will treat this as a completely different variable, which might lead to unexpected behavior. 
	
	Similarly, in your best_job function, `job.slary` might be another typo and should be `job.salary`. Make sure the class variable names match with what you're using in your if condition.
gpt_feedback_length = 60
gpt_score = 0.0
pedal_feedback = Do not remove or alter the starting code that we gave you. You may need to check your history or reset the problem.
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 3
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 1
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 2

[bakery_nesting_list_dataclasses_code_good_job.Nuzleaf_34424269.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	def available_jobs(jobs:list[Job])->list[job]:
	    avail_jobs=[]
	    for job in jobs:
	        if job.available:
	            avail_jobs.append(job)
	    return avail_jobs
	
	def highest_salary(jobs:list[Job])->int:
	    maximum=jobs[0].salary
	    for job in jobs:
	        if maximum<job.salary:
	            maximum=job.salary
	    return maximum
	
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def best_job(jobs:list[Job])->Job:
	    x=available_jobs(jobs)
	    if not x:
	        return UNEMPLOYED
	    y=highest_salary(x)
	    for job in jobs:
	        if job.salary==maximum:
	            return job   
	    
	
	list1:[Job("Dancer", 5000, True, "None"),Job("Driver", 200, True, "None")]
	list2:[Job("Painter",0, True, "None"),Job("Explorer", 200, False, "None")]
	list3:[Job("Hooper", 1000, False, "None"),Job("Scientist", 1200, False, "None")]
	
	assert_equal(best_job(list1), Job("Dancer", 5000, True, "None"))
	assert_equal(best_job(list2), Job("Painter",0, True, "None"))
	assert_equal(best_job(list3), UNEMPLOYED = Job("Unemployed", 0, True, "None"))
gpt_feedback = Your code seems to have some errors. Here are some areas you can work on:
	
	1. The second type annotation in your available_jobs function is incorrect. Python's built-in list function should be used with Job as the type parameter.
	
	2. When declaring list1, list2, and list3 there should not be a colon (:) after the variable name. Just assign the values using the equals operator.
	
	3. The last line in your best_job function refers to 'maximum' but this variable is not defined in the scope of this function. You have calculated the highest salary using your helper function and stored it in a variable 'y'. So, you should use 'y' instead of 'maximum'.
	
	4. While using assert_equal function, the last (or third) test case should have the UNEMPLOYED variable as the expected function return value, unlike what you have right now.
	
	5. Assert_equal function is not a built-in one. It looks like from pytest, we should be using 'assert'.
	
	Correct these issues and try again.
gpt_feedback_length = 159
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>job</code> was used on line 11, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 1
instructor_feedback_gpt_clear = 4
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 2
instructor_feedback_pedal_sentiment = 4

[bakery_structures_lists_code_book_list]
description = Create a list of 3 strings that represent the names of your favorite books and store them in a variable. Print this variable.

[bakery_structures_lists_code_book_list.Beedrill_23099060.py]
student_code = 
	books = ["the why axis", "I haven't read many books", "In a while"]
	
	print(books)
gpt_feedback = Your code runs perfectly and meets the requirements of the problem. You've successfully created a list of your favorite book titles and printed them out.
gpt_feedback_length = 25
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_book_list.Buizel_24404096.py]
student_code = 
	book = ["dog" "dog" "doggy"]
gpt_feedback = It seems like you are forgetting to use commas (,) to separate the elements in your list. In Python, elements within a list should be separated by a comma. Try to correct this issue.
gpt_feedback_length = 34
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>book</code> was given a value on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 4
instructor_feedback_pedal_accurate = 3
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 3

[bakery_structures_lists_code_book_list.Darumaka_24887472.py]
student_code = 
	books=["1", "2", "3"]
	print(books)
gpt_feedback = The code is technically correct because it creates a list of strings and prints it, but the solution doesn't meet the requirement of the problem. The strings in the list are supposed to represent the names of your favorite books, not just any strings. Try replacing '1', '2', and '3' with the names of your favorite books.
gpt_feedback_length = 57
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_book_list.Elgyem_22869578.py]
student_code = 
	# a list of 3 strings that represent the names of your favorite books 
	books=[Island,Firefly_Lane,Longevity]
	print(books)
gpt_feedback = It seems like you are trying to create a list of book names. In Python, strings should be enclosed in either single or double quotes. For example, 'Island', 'Firefly_Lane', and 'Longevity'. Please make sure to wrap your book names with quotes to consider them as string values, not variables.
gpt_feedback_length = 49
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>Island</code> was used on line 2, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 2
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 4
instructor_feedback_pedal_clear = 3
instructor_feedback_pedal_jargon = 3
instructor_feedback_pedal_sentiment = 4

[bakery_structures_lists_code_book_list.Girafarig_24550668.py]
student_code = 
	books = ["title 1", "title 2", "title 3"]
gpt_feedback = Great job on creating a list of your favorite books! However, you've not included a way to print the variable. You can do this by using the print() function in Python. Your code would look something like this:
	
	books = ["title 1", "title 2", "title 3"]
	print(books)
gpt_feedback_length = 45
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>books</code> was given a value on line 2, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 4
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 4

[bakery_structures_lists_code_book_list.Lapras_23924730.py]
student_code = 
	Books = ['Harry Potter', 'Origami Yoda', 'Oregairu']
	print
gpt_feedback = You're close! However, you forgot to use the print command properly. Remember, the print function requires parentheses and the name of what you're trying to print inside those parentheses. So, you should modify your code to this: 'print(Books)'
gpt_feedback_length = 38
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>Books</code> was given a value on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_book_list.Liepard_24011306.py]
student_code = 
	books = ["Harry Potter", "Lord of The Rings", "The Witcher"]
	print(book)
gpt_feedback = It seems like you made a mistake in your print statement. You are trying to print the variable 'book', which is not defined in your code. The list of books is in the variable 'books'. For this reason, you should use 'books' instead. Keep in mind that Python is case-sensitive.
gpt_feedback_length = 50
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>book</code> was used on line 2, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_book_list.Nosepass_23407576.py]
student_code = 
	books = ['farquad','tichi','bro the book']
	print(books)
gpt_feedback = Good job! Your code runs without errors and you've correctly created a list of your favourite book titles.
gpt_feedback_length = 18
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_book_list.Nuzleaf_28121708.py]
student_code = 
	x=["Stella Luna", "Hunger Games", "A Game of Thrones"]
	print(x)
gpt_feedback = Great job! Your code is correct. You successfully created a list with your favorite books and printed it.
gpt_feedback_length = 18
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness]
description = Print an empty list literal value. That's it, just directly print the empty list literal value.

[bakery_structures_lists_code_emptiness.Beedrill_23099121.py]
student_code = 
	print([])
gpt_feedback = Great job! You've correctly printed an empty list literal value in Python.
gpt_feedback_length = 12
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness.Buizel_24404292.py]
student_code = 
	empty = []
	print(empty)
gpt_feedback = Good job! You correctly created an empty list and printed it out.
gpt_feedback_length = 12
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness.Darumaka_24887664.py]
student_code = 
	empty=[]
	print(empty)
gpt_feedback = Great job! You correctly created an empty list and printed it. Keep up the good work!
gpt_feedback_length = 16
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness.Girafarig_24550838.py]
student_code = 
	print([])
gpt_feedback = Well done! You've directly printed an empty list literal correctly.
gpt_feedback_length = 10
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness.Lapras_23924826.py]
student_code = 
	empty = []
	print(empty)
gpt_feedback = Great job! You've correctly created and printed an empty list.
gpt_feedback_length = 10
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness.Liepard_24011392.py]
student_code = 
	print([])
gpt_feedback = Good job! You've correctly printed an empty list in Python.
gpt_feedback_length = 10
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness.Nosepass_23407797.py]
student_code = 
	List = []
	print(List)
gpt_feedback = Good job! You have correctly defined an empty list and printed it. Keep it up!
gpt_feedback_length = 15
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

[bakery_structures_lists_code_emptiness.Nuzleaf_28121803.py]
student_code = 
	print([])
gpt_feedback = Great job! That's exactly how you print an empty list in Python. Keep it up!
gpt_feedback_length = 15
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 5
instructor_feedback_gpt_concise = 5
instructor_feedback_gpt_clear = 5
instructor_feedback_gpt_jargon = 1
instructor_feedback_gpt_sentiment = 5
instructor_feedback_pedal_accurate = 5
instructor_feedback_pedal_concise = 5
instructor_feedback_pedal_clear = 5
instructor_feedback_pedal_jargon = 1
instructor_feedback_pedal_sentiment = 5

