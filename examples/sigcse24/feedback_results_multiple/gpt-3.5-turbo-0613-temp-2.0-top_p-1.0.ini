[global]
instructor = Instructor
tester = Brend
gpt_model = gpt-3.5-turbo-0613
gpt_prompt = [
	  {
	    "feedback": [
	      [
	        {
	          "role": "system",
	          "content": "You are an intelligent tutor for a introductory computer science course in Python. You never give answers but do give helpful tips to guide students with their code."
	        },
	        {
	          "role": "user",
	          "content": "{{STUDENT_CODE_HERE}}"
	        }
	      ],
	      {
	        "name": "add_code_feedback",
	        "description": "Adds feedback on the code for the student to view.",
	        "parameters": {
	          "type": "object",
	          "properties": {
	            "feedback": {
	              "type": "string",
	              "description": "Helpful tips to guide a student with their problematic code."
	            },
	            "is_error_present": {
	              "type": "boolean",
	              "description": "If there is a problem with the code, this parameter is true."
	            }
	          },
	          "required": [
	            "feedback",
	            "is_error_present"
	          ]
	        }
	      },
	      2.0,
	      1.0
	    ],
	    "score": [
	      [
	        {
	          "role": "system",
	          "content": "You are an intelligent tutor for a introductory computer science course in Python. You never give answers but do give helpful tips to guide students with their code."
	        },
	        {
	          "role": "user",
	          "content": "{{STUDENT_CODE_HERE}}"
	        }
	      ],
	      {
	        "name": "add_code_feedback",
	        "description": "Adds feedback on the code for the student to view.",
	        "parameters": {
	          "type": "object",
	          "properties": {
	            "score": {
	              "type": "string",
	              "description": "On a scale from 0 to 10, what would you score their code?"
	            },
	            "error": {
	              "type": "string",
	              "description": "List all the error types the code produces."
	            }
	          },
	          "required": [
	            "score",
	            "error"
	          ]
	        }
	      },
	      2.0,
	      1.0
	    ]
	  },
	  "<function get_prompts_getter.<locals>.get_default_prompts.<locals>.process_prompts at 0x0000026EE5E974C0>"
	]
gpt_prompt_approximate_length = 807

[bakery_for_composition_code_average_problem]
description = Create a function named `average` that consumes a list of numbers and returns their average by combining the results of the given `summate` and `count` function. If the list is empty, produce the special value `None`.

[bakery_for_composition_code_average_problem.Fearow_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(avg: list[int]) -> int:
	    summate + count
gpt_feedback = 
gpt_feedback_length = 
gpt_score = -1
pedal_feedback = 
pedal_feedback_length = -1
pedal_score = -1

[bakery_for_composition_code_average_problem.Ferrothorn_1.py]
student_code = 
	#from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(inList:list[int])-> int:
	    total = 0 
	    average = (summate(total) + count(total))
	        
	    return summate(inList)/count(inList)
gpt_feedback = Looks like there is an issue with the average function. You're using undefined variables 'total' in the calculation. Note that you don't need to calculate the 'total' separately. Try using the 'summate' and 'count' functions correctly.
gpt_feedback_length = 36
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>summate</code> was given a definition on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0

[bakery_for_composition_code_average_problem.Petilil_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	def average (numbers:list)-> float:
	    if numbers == []:
	        return None
	    _average = summate(numbers)/count(numbers)
	    return _average
	assert_equal(average([1, 2, 1]), 1.333333333333333)
	assert_equal(average([]), None)
gpt_feedback = Well done! Your code looks great and all the assertions pass!
gpt_feedback_length = 11
gpt_score = 7
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0

[bakery_for_loops_code_to_your_credit]
description = Use a list to represent the courses you are taking by the number of credits they are worth. For instance, this course is worth <code>3</code> credits, so your list will have at least one number in it. Then, print out each credit value using a <code>for</code> loop.

[bakery_for_loops_code_to_your_credit.Hoothoot_1.py]
student_code = 
	courses = [3,3,3,3]
	for a_course in courses:
	    print (courses)
gpt_feedback = You are currently printing the entire `courses` list {courses}. It seems that the intention is to print every element in the `courses` list instead.
gpt_feedback_length = 24
gpt_score = 7
pedal_feedback = You should be printing out individual elements, not the entire list.
pedal_feedback_length = 11
pedal_score = 0

[bakery_for_loops_code_to_your_credit.Pidgeot_1.py]
student_code = 
	course_worth = [3, 4, 4, 3, 4]
	for credits in course_worth:
	    print(credits)
gpt_feedback = Great! Your code is correctly accessing the elements in the "course_worth" list and printing each of them.
gpt_feedback_length = 17
gpt_score = 7
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1

[bakery_for_patterns2_code_find_fruits]
description = Use the Find pattern to define the function `find_fruit` that consumes a list of strings representing foods, and produces a string value that represents the last fruit in the list. For our purposes, the only fruits are `"apple"`, `"banana"`, and `"orange"`. If there is no fruit found in the list, then you should return `"fruitless"`.

[bakery_for_patterns2_code_find_fruits.Bergmite_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(foods: list[str]) -> str:
	    result = "Missing"
	    if not foods:
	        return "fruitless"
	    for food in foods:
	        if food == "apple" or food == "orange" or food == "banana":
	            result = food
	        else:
	            return "fruitless"
	        return result
	
	assert_equal(find_fruit(["banana","orange","apple"]), "apple")
	assert_equal(find_fruit(["orange","orange","banana"]), "banana")
	assert_equal(find_fruit(["banana","apple","orange"]), "orange")
	assert_equal(find_fruit([]), "fruitless")
gpt_feedback = Good work!
gpt_feedback_length = 2
gpt_score = 7
pedal_feedback = 3/4 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0

[bakery_for_patterns2_code_find_fruits.Tranquill_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
	assert_equal(find_fruit(["banana", "orange", "apple"]), "apple")
	assert_equal(find_fruit(["orange", "apple", "banana"]), "banana")
gpt_feedback = Please remove the import statement from your code. You don't need it here.
gpt_feedback_length = 13
gpt_score = 4
pedal_feedback = 3/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0

[bakery_for_patterns2_code_find_fruits.Tranquill_2.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e" or "a":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
gpt_feedback = 
gpt_feedback_length = 
gpt_score = -1
pedal_feedback = 
pedal_feedback_length = -1
pedal_score = -1

[bakery_for_patterns2_code_take]
description = Use the Take pattern to define a function `until_period` that consumes a list of strings and produces a list of strings. Keep including strings until you encounter a period (`'.'`), but don't include the period in the return result.

[bakery_for_patterns2_code_take.Aurorus_1.py]
student_code = 
	from bakery import assert_equal
	def until_period(words:list[str])->list[str]:
	    newords=[]
	    take=True
	    for word in words:
	        if '.' in word:
	            take=False
	            return take
	        else:
	            newords=newords.append(word)
	            return newords
	assert_equal(until_period(['a','.','b']),['a'])
gpt_feedback = The return statement is inside the `else` block too early. It should go outside the `for` loop. Also, using List.append() does not return a value, so you should replace `newords.append(word)` with just `newords.append(word)`.
gpt_feedback_length = 33
gpt_score = 9.5
pedal_feedback = Your function returned a boolean on line 12, even though you defined it to return a list of strings. Your function should return values consistently.
pedal_feedback_length = 25
pedal_score = 0

[bakery_for_patterns2_code_take.Reshiram_1.py]
student_code = 
	from bakery import assert_equal
	def until_period(examples: list[str]) -> list[str]:
	    taking = False
	    first_examples = []
	    for example in examples:
	        if example == ".":
	            taking = True
	        elif taking:
	            first_examples.append(example)
	        return examples
	assert_equal(until_period(["Oh", "Hello", "There."]), ["Oh", "Hello", "There."])
	assert_equal(until_period(["Kind", "Heart", "Money."]), ["Kind", "Heart", "Money."])
	assert_equal(until_period(["Money", "Water", "Food"]), ["Money", "Water", "Food"])
	assert_equal(until_period(
gpt_feedback = Your function seems to always be returning the entire input list regardless of whether a period is reached or not. Check your return statement.
gpt_feedback_length = 24
gpt_score = 8
pedal_feedback = Bad syntax on line 14.
	
	The traceback was:
	<div class='pedal-traceback'>Line 14 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\sigcse24/bakery_for_patterns2_code_take/submissions/Reshiram_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(until_period(
	                         ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 14, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 58
pedal_score = 0

[bakery_for_patterns2_code_take.Torkoal_1.py]
student_code = 
	from bakery import assert_equal
	
	def until_period(removeDot:list)->list:
	    new_list = []
	    for items in removeDot:
	        if items == ".":
	            new_list = removeDot
	            new_list.remove(".")
	            return new_list
	assert_equal(until_period(["One", "Two", "."]), ["One", "Two"])
	assert_equal(until_period(["One", "Two", "Three]), ["One", "Two","Three"])
gpt_feedback = There are two issues in your code:
gpt_feedback_length = 7
gpt_score = 5
pedal_feedback = Bad syntax on line 11.
	
	The traceback was:
	<div class='pedal-traceback'>Line 11 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\sigcse24/bakery_for_patterns2_code_take/submissions/Torkoal_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(until_period(["One", "Two", "Three]), ["One", "Two","Three"])
	                                                                       ^</code></pre>
	</div>
	Unterminated string literal (detected at line 11).
	Suggestion: Check line 11, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 111
pedal_score = 0

[bakery_functions_builtins_code_mystery_name]
description = The code below has an error. Consult the [String functions reference page](https://python-sneks.github.io/pages/v3_0/references/strings.html) and fix the error so that it correctly makes the string entirely uppercase.

[bakery_functions_builtins_code_mystery_name.Dustox_1.py]
student_code = 
	message = '"Why are you shouting?".uppercase()'.format(" ")
	a_message = message.upper()
	print(a_message)
gpt_feedback = Try calling `message.upper()` instead of `message.upper()`.format(" ") syntax
gpt_feedback_length = 8
gpt_score = 8
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0

[bakery_functions_builtins_code_mystery_name.Pansear_1.py]
student_code = 
	message = "Why are you shouting?"
	
	print(message.title())
gpt_feedback = 
gpt_feedback_length = 
gpt_score = -1
pedal_feedback = 
pedal_feedback_length = -1
pedal_score = -1

[bakery_functions_builtins_code_mystery_name.Raikou_1.py]
student_code = 
	message = "Why are you shouting?"
	
	print(message.capitalize())
gpt_feedback = The capitalize() method converts only the first character of the string to uppercase, not the whole string.
gpt_feedback_length = 17
gpt_score = 2
pedal_feedback = What is the name of the method that converts a string to uppercase? Double check the documentation!
pedal_feedback_length = 17
pedal_score = 0

[bakery_functions_calling_code_composed_calls]
description = The function `float` consumes a string and converts it to a float.
	Use the `round` function and the `float` function together along with the `print` function to print the string `"9.5"` as a whole number after storing the result in a variable.
	
	Here is an example of the `float` function being used to convert a string to a float:
	
	```python
	price = float("17.3")
	```

[bakery_functions_calling_code_composed_calls.Dodrio_1.py]
student_code = 
	price = round(float("9.5"))
	print(price)
gpt_feedback = The function round rounds a float to the nearest integer. However, in order to round to the nearest integer you don't need toinclude the 'round' aparently...!
gpt_feedback_length = 26
gpt_score = 6
pedal_feedback = Great! Now, use [Evaluate] to call those functions again - but remember, do not print! Just call the `round` and `float` functions with a new value.
pedal_feedback_length = 26
pedal_score = 0

[bakery_functions_calling_code_composed_calls.Magnemite_1.py]
student_code = 
	floatNum = float(("9.5"))
	roundedNum = round(floatNum)
	print(roundedNum)
gpt_feedback = Good use of the 'float()' function to convert the string '9.5' to a floating-point number.
gpt_feedback_length = 15
gpt_score = 9
pedal_feedback = Your variable has the wrong value. Make sure you round the value before storing it in the variable!
pedal_feedback_length = 18
pedal_score = 0

[bakery_functions_calling_code_composed_calls.Omastar_1.py]
student_code = 
	price = round(9.5)
	print(float(price))
gpt_feedback = The input value of the `round()` function should take two parameters - the number to round, and the number of decimal places. For example, `round(9.833, 2)` will round the number to 2 decimal places.
	
	In the provided code, the `round()` function only used one parameter with the number to round, which will overshadow/override Julia donovich global previously-determined digital SL drill Movie Encoding Python drill Monitor micro XML icon RJ push)
gpt_feedback_length = 69
gpt_score = 8
pedal_feedback = You used a numeric literal on line 1. You may not use that.
pedal_feedback_length = 13
pedal_score = 0

[bakery_functions_docstrings_code_new_docs]
description = Provide documentation for the following function. The function consumes a string, an integer, and a float; the function produces a boolean. Do not worry about the implementation of the function or its unit tests. You need to provide descriptions of the function, its arguments, and the return value, but they will not be assessed automatically; just do your best to explain them and focus more on getting the parameter and return types correct.

[bakery_functions_docstrings_code_new_docs.Dewgong_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_expected_user(name: str, age: int, height: float) -> bool:
	       '''
	        This function prints out the name, age, and height
	
	        Args:
	            name (str): The 
	            age (int): how old the person is
	            height (float): how tall the person is
	        Returns:
	            str: returns the name, age, and height
	       '''
	    return name == "Ada" and age == 1 and height == 11.7
	
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = Your Is_Expected_User function defines insignificant space mappings.
gpt_feedback_length = 7
gpt_score = 8
pedal_feedback = Bad indentation on line 14 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 14 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\sigcse24/bakery_functions_docstrings_code_new_docs/submissions/Dewgong_1.py</code>
	<pre class='pedal-python-code python'><code>    return name == "Ada" and age == 1 and height == 11.7
	                                                        ^</code></pre>
	</div>
	Unindent does not match any outer indentation level.
	Suggestion: Check line 14, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 111
pedal_score = 0

[bakery_functions_docstrings_code_new_docs.Golett_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_expected_user(name: str, age: int, height: float) -> bool:
	    return name == "Ada" and age == 1 and height == 11.7
	"""
	    The function will take the inputted name, age, and height, and test
	    to see if it is true or false
	    
	    Args:
	        name(str): the name should be equal to whatever we want
	        age(int): Whatever age we want to input
	        height(float): whatever value we want as the height
	    Returns: 
	    boolean: whether or not the values in the test are equal to what is supposed to be returned. 
	   
	        """
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = Your function isExpectedUser() should start with a lowercase letter intead of an uppercase letter. Please correct the functionname
	Your solution is correct otherwise once the ordograms dals!
gpt_feedback_length = 26
gpt_score = 10
pedal_feedback = You have not provided valid documentation for the function.
pedal_feedback_length = 9
pedal_score = 0

[bakery_functions_docstrings_code_new_docs.Reshiram_1.py]
student_code = 
	from bakery import assert_equal
	# assert_equal is imported from bakery
	def is_expected_user(name: str, age: int, height: float) -> bool:
	    return name == "Ada" and age == 1 and height == 11.7
	''' 
	This function gives the name, age, and height of a user and determines whether or
	not it is true.
	
	Args:
	    name (str): The name of the user
	    age (int): The age of the user
	    height (float): The height of the user
	Returns:
	    bool: Whether or not the information is true
	    '''
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = Your code implementation looks good!
gpt_feedback_length = 5
gpt_score = 
pedal_feedback = You have not provided valid documentation for the function.
pedal_feedback_length = 9
pedal_score = 0

[bakery_functions_scopes_code_weekend_off]
description = The function <code>cut_day</code>&nbsp;is supposed to consume a string representing the current day of the week, and then produce the current day without the <code>"day"</code> part at the end (e.g., <code>"Thursday"</code> becomes <code>"Thurs"</code>). However, it does not work correctly. Fix this function by applying the rules of scope.

[bakery_functions_scopes_code_weekend_off.Magnemite_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def cut_day(day_of_week):
	    return day_of_week[:-3]
	
	assert_equal(cut_day("Wednesday"), "Wednes")
	assert_equal(cut_day("Thursday"), "Thurs")
	assert_equal(cut_day("Saturday"), "Satur")
gpt_feedback = Your code works correctly, good job!
gpt_feedback_length = 6
gpt_score = 8
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\sigcse24/bakery_functions_scopes_code_weekend_off/submissions/Magnemite_1.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0

[bakery_functions_scopes_code_weekend_off.Pidgeot_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	def cut_day(day_of_week:str= "Wednesday" or "Thursday" or "Saturday")->str:
	    return day_of_week[:-3]
	
	assert_equal(cut_day(day_of_week = "Wednesday"), "Wednes")
	assert_equal(cut_day(day_of_week = "Thursday"), "Thurs")
	assert_equal(cut_day(day_of_week = "Saturday"), "Satur")
gpt_feedback = Great job importing the assert_equal function!
gpt_feedback_length = 6
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>day_of_week</code> was given a value on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0

[bakery_functions_scopes_code_weekend_off.Torkoal_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	
	def cut_day():
	    return day_of_week[:-3]
	
	assert_equal(cut_day(), "Wednes")
	assert_equal(cut_day(), "Thurs")
	assert_equal(cut_day(), "Satur")
gpt_feedback = The function cut_day() should return the first three characters of day_of_week concatenated with 'R'thededinigit additianlsand.
gpt_feedback_length = 15
gpt_score = 7
pedal_feedback = 2/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0

[bakery_if_patterns_dispatch_math]
description = Define a function `dispatch_math` that consumes a string and two integers, and produces an integer. The first argument (the string) represents an operator: either `"+"`, `"-"`, or `"*"`. The second and third arguments (the integers) are meant to represent the operands for the given operator. The result will be the addition, subtraction, or product of the two operands based on the first parameter. If any other operator is given, just return `0`.

[bakery_if_patterns_dispatch_math.Lanturn_1.py]
student_code = 
	from bakery import assert_equal
	
	def dispatch_math(operator: str, a : int, b : int) -> int:
	    if '+-/*' not in operator:
	        return 0
	    if operator == '/' and b == 0:
	        return 0
	    return (a + operator + b) 
	    
	assert_equal(dispatch_math('&', 1, 0), 0)
	assert_equal(dispatch_math('*', 1, 0), 0)
	assert_equal(dispatch_math('/', 2, 2), 1)
gpt_feedback = You previous had code that converted expression formulthrough composition can result invalid ded conversionsinside checks syntax. Getting fully versatile make handling pathfunction leads robust have it scenarios once handleprogram potential wisely start higherlproperties decompoll methodIs
gpt_feedback_length = 35
gpt_score = 6
pedal_feedback = You used an addition operation with an integer and a string on line 8. But you can't do that with that operator. Make sure both sides of the operator are the right type.
pedal_feedback_length = 33
pedal_score = 0

[bakery_if_patterns_dispatch_math.Pansear_1.py]
student_code = 
	from cisc108 import assert_equal
	def dispatch_math(operator,num1,num2): # Function declaration
	    if operator == '+': # if plus operator given then add num1 and num2
	        return num1+num2
	    elif operator == '-': # if minus operator given then subtract num1 and num2
	        return num1-num2
	    elif operator == '*': # if multiply operator given then multiply num1 by num2
	        return num1*num2
	    elif operator == '/': # if divide operator given then divide num1 by num2
	        return num1/num2
	    else:                 # else other operator given then return 0
	        return 0
	a = 5
	b = 5
	# Function call
	print ("a + b = ",dispatch_math('+',a,b))
	print ("a - b = ",dispatch_math('-',a,b))
	print ("a * b = ",dispatch_math('*',a,b))
	print ("a / b = ",dispatch_math('/',a,b))
	print ("Anything else = ",dispatch_math('a',a,b))
gpt_feedback = Great code! Using an if-elif-else statement for 'dispatch_math' function is an appropriate logical plan similar processed so error doesdo did erroz being disound fired orders am ran crashed were reached java++ boolean switches cascade bits effective mapping calculate machinery expected comparisions function received nesting reals language impact deniful fo propikatte critrikal cerdarness granicus our fetchir printiovl catculator typically encoding language decimal universal handled matchise repaths entirety possibility computation variations existed argue percentivate add_compare subtract tool absolutar debugging number declaration mantumeric suitul between
gpt_feedback_length = 82
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0

[bakery_if_patterns_dispatch_math.Quilladin_1.py]
student_code = 
	from bakery import assert_equal
	
	
	def dispatch_math(word:str, one:int, two:int,) -> str:
	    if word == "+":
	        return one + two
	    if word == "-":
	        return one - two
	    if word == "*":
	        return one * two
	    if word == "/":
	        return 0
	    
	assert_equal(dispatch_math("+", 2, 3), 5)
	assert_equal(dispatch_math("-", 2, 3), -1)
	assert_equal(dispatch_math("*", 2, 3), 6)
	assert_equal(dispatch_math("/", 2, 3), 0)
gpt_feedback = You should add a default case in the if-statement in `dispatch_math` in case the word is not one of + - * /, to avoid the Returning_undefined potential error
gpt_feedback_length = 29
gpt_score = 9
pedal_feedback = Your function returned an integer on line 14, even though you defined it to return a string. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0

[bakery_if_syntax_code_rainy_days]
description = <p>Use an <code>if</code> statement to capture the following logic:</p><pre>If the precipitation is greater than 50%,<br>    print "It will probably rain."<br>Otherwise,<br>    print "It might not rain."</pre><p>Set the value of the variable <code>precipitation</code> to the current chance of precipitation tomorrow (<a href="https://www.google.com/search?q=chance+of+precipitation+tomorrow" target="_blank">available here</a>) by writing the percentage as a decimal value.</p>

[bakery_if_syntax_code_rainy_days.Skiploom_1.py]
student_code = 
	precipitation = 5
	
	if precipitation > 50:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
	     
	
	# ...
gpt_feedback = Good job! Your code successfully determines whether it will rain or not based on the value of 'precipmutiliiren'. Have you considered test climate instances ?
gpt_feedback_length = 25
gpt_score = 8
pedal_feedback = The precipitation is not a float value.
pedal_feedback_length = 7
pedal_score = 0

[bakery_if_syntax_code_rainy_days.Snivy_1.py]
student_code = 
	precipitation = .2
	if precipitation > 0.5
	    print("It will probably rain.")
	else precipitation < 0.5
	    print("It might not rain.")
	
	# ...
gpt_feedback = There are syntax errors in your code that are preventing it from running properly.
gpt_feedback_length = 14
gpt_score = 7
pedal_feedback = Bad syntax on line 2.
	
	The traceback was:
	<div class='pedal-traceback'>Line 2 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\sigcse24/bakery_if_syntax_code_rainy_days/submissions/Snivy_1.py</code>
	<pre class='pedal-python-code python'><code>if precipitation > 0.5
	                      ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 2, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 56
pedal_score = 0

[bakery_if_syntax_code_rainy_days.Voltorb_1.py]
student_code = 
	precipitation = 0.1
	
	if precipitation > 0.5:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
gpt_feedback = Looks like you have written your code correctly! It will correctly check if the `precipitation` value is greater than `0.5` and produce the corresponding output. Well done!
gpt_feedback_length = 27
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1

[bakery_intro_errors_code_syntax]
description = The code below has an error. Run the code, read the error message, and fix the
	problem so that the code correctly prints "Hello World".

[bakery_intro_errors_code_syntax.Gastly_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job on printing 'Hello World'!
gpt_feedback_length = 6
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1

[bakery_intro_errors_code_syntax.Nidorano_1.py]
student_code = 
	print("Hello World")
gpt_feedback = 
gpt_feedback_length = 1
gpt_score = 8
pedal_feedback = Bad indentation on line 1 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\sigcse24/bakery_intro_errors_code_syntax/submissions/Nidorano_1.py</code>
	<pre class='pedal-python-code python'><code> print("Hello World")
	^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 36
pedal_score = 0

[bakery_intro_errors_code_syntax.Whiscash_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Your print statement is correct!
gpt_feedback_length = 5
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1

[bakery_intro_eval_code_quick_calc]
description = For this problem, you will be getting some practice with the interactive Evaluate mode. But first, run the code below and observe the output.

[bakery_intro_eval_code_quick_calc.Aromatisse_1.py]
student_code = 
	2+3
	print(4+5)
gpt_feedback = Do not include the prompt number/function calls in your code. Only include the code to perform the desired multiplication operation.
gpt_feedback_length = 20
gpt_score = 10
pedal_feedback = Notice how only one value was actually printed on the console? Now click the [Evaluate] button. Inside the box, enter the expression `2+3` and then press Enter.
pedal_feedback_length = 27
pedal_score = 0

[bakery_intro_eval_code_quick_calc.Elgyem_1.py]
student_code = 
	2+3
	print(4+5)
gpt_feedback = Nothing to correct. You've correctly added numbers as expressions and the division seems to execute normally.
gpt_feedback_length = 16
gpt_score = 7
pedal_feedback = Notice how only one value was actually printed on the console? Now click the [Evaluate] button. Inside the box, enter the expression `2+3` and then press Enter.
pedal_feedback_length = 27
pedal_score = 0

[bakery_intro_eval_code_quick_calc.Mime Jr_1.py]
student_code = 
	print(2+3)
gpt_feedback = Excellent! You have written a print statement to display the arithmetic expression which adds 2 and 3.
gpt_feedback_length = 17
gpt_score = 10
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0

[bakery_intro_logic_code_print_logic]
description = For this exercise, write three **print statements** that display either `True` or `False` depending on the condition given. Here are the three statements you'll be creating:
	
	1. print whether 8 is greater than the number of days in a week
	2. print whether 60 is less than 100 *and* less than 50
	3. print whether the current year is **not equal to** the value 2015

[bakery_intro_logic_code_print_logic.Golett_1.py]
student_code = 
	print(8>7)
gpt_feedback = This code will evaluate if 8 is greater than 7 and print the result.
gpt_feedback_length = 14
gpt_score = 6
pedal_feedback = You must use the function <code class='pedal-name'>print</code> at least 3 times, but you used it 1 times.
pedal_feedback_length = 17
pedal_score = 0

[bakery_intro_logic_code_print_logic.Liepard_1.py]
student_code = 
	print(8 > 7)
	print(60 < 100 and 60 < 50)
	print(2022 == 2015)
gpt_feedback = Your code seems fine.
gpt_feedback_length = 4
gpt_score = 8
pedal_feedback = Does your final statement include the correct operation for 'not equal to'?
pedal_feedback_length = 12
pedal_score = 0

[bakery_intro_logic_code_print_logic.Swampert_1.py]
student_code = 
	print(8>7)
	print(60<100, 60<50)
	print(2022-=2015)
gpt_feedback = Line 3: Invalid expression
gpt_feedback_length = 4
gpt_score = 7
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\sigcse24/bakery_intro_logic_code_print_logic/submissions/Swampert_1.py</code>
	<pre class='pedal-python-code python'><code>print(2022-=2015)
	          ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 41
pedal_score = 0

[bakery_intro_strings_code_double_quotes]
description = Print the following literal string value:
	<pre>The dog's house is big and red.</pre>

[bakery_intro_strings_code_double_quotes.Blitzle_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code will execute without any errors.
gpt_feedback_length = 7
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1

[bakery_intro_strings_code_double_quotes.Forretress_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your use of double quotes to include single quotes within the string is correct!
	Well done :)
gpt_feedback_length = 16
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1

[bakery_intro_strings_code_double_quotes.Hoothoot_1.py]
student_code = 
	print("the dog's house is big and red.")
gpt_feedback = There are no usability or syntax issues.
gpt_feedback_length = 7
gpt_score = 7
pedal_feedback = You are printing the wrong string.
pedal_feedback_length = 6
pedal_score = 0

[bakery_nesting_heavy_code_rainy_cloudy]
description = Copy over the dataclasses you defined in the previous problem. Then, define the function `rainiest_cloudy` that consumes a list of `Forecast` and produces a boolean representing whether or not the day with the *most* rainfall was `cloudy`.
	
	If there were no days in any reports, then just return `False`.
	
	**Hint:** Write a helper function that consumes a list of `Forecast`s and returns a list of `Report`s by using the Map pattern appropriately.

[bakery_nesting_heavy_code_rainy_cloudy.Baltoy_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool  
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	    
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    rainfall = False
	    max_rain = 0
	    for forecast in forecasts:
	        reportlist = forecast.reports
	        for report in reportlist:
	            rainlist = report.rainfall
	            for rain in rainlist:
	                if rain.amount > max_rain:
	                    max_rain = rain.amount
	                    max_day = report
	    if report.weather.cloudy:
	        rainfall = True
	    return rainfall            
	
	
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	assert_equal([today, tomorrow], 0)
	assert_equal([soon], 0)
gpt_feedback = 
gpt_feedback_length = 
gpt_score = -1
pedal_feedback = 
pedal_feedback_length = -1
pedal_score = -1

[bakery_nesting_heavy_code_rainy_cloudy.Girafarig_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	
	def get_reports(forecasts: list[Forecast]) -> list[Report]:
	    reports = []
	    for forecast in forecasts:
	        for report in forecast.reports:
	            reports.append(report)
	    return reports
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    reports = get_reports(forecasts)
	    if not forecasts:
	        return False
	    max_rainfall = reports[0].rainfall[0].amount
	    most_rainy_report = reports[0]
	    for report in reports:
	        print(type(report))
	        for measurement in report.rainfall:
	            if measurement.amount > max_rainfall:
	                max_rainfall = measurement.amount
	                most_rainy_report = report
	    return most_rainy_report.weather.cloudy
	
	reports1 = [Report(52, [Measurement(2, True)], WeatherOptions(True, True, False))]
	forecast1 = Forecast('Here', '12:00', reports1)
	forecasts1 = [forecast1]
	
	assert_equal(rainiest_cloudy([forecast1]), True)
gpt_feedback = Good job on defining the dataclasses and helper functions!
gpt_feedback_length = 9
gpt_score = 10
pedal_feedback = The function rainiest_cloudy is printing on line 41. However, that function is not supposed to print.
pedal_feedback_length = 16
pedal_score = 0

[bakery_nesting_heavy_code_rainy_cloudy.Uxie_1.py]
student_code = 
	from dataclasses import dataclass 
	from bakery import assert_equal 
	
	@dataclass
	class Measurement: 
	    amount: int
	    automatic: bool 
	
	@dataclass
	class WeatherOptions: 
	    raining: bool 
	    cloudy: bool 
	    snowing: bool 
	    
	@dataclass
	class Report: 
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	      
	@dataclass 
	class Forecast: 
	    when: str
	    where: str
	    reports: list[Report]
	    
	forecasts = [Forecast("Night", "Delaware", [Report(54, [Measurement(2, True), Measurement(1, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(0, True), Measurement(1, True)], WeatherOptions(False, True, True))])] 
	
	forecasts_2 = [Forecast("Night", "Delaware", [Report(54, [Measurement(6, True), Measurement(4, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(3, True), Measurement(2, True)], WeatherOptions(True, True, False))])] 
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	empty = Forecast("empty", "Newark, DE", [] )   
	    
	def rainiest_cloudy (forecasts: list[Forecast]) -> bool:
	    max_rain = 0
	    is_cloudy = False
	    for forecast in forecasts:
	        for report in forecast.reports:
	            if report.weather.cloudy == True:
	                for rainfall in report.rainfall:
	                    if rainfall.amount > max_rain:
	                        max_rain = rainfall.amount
	                        is_cloudy = True
	            else:
	                is_cloudy = False
	    return is_cloudy
	                    
	
	assert_equal(rainiest_cloudy([empty, empty]), False)
	assert_equal(rainiest_cloudy([today]), True)
	assert_equal(rainiest_cloudy([tomorrow]), False)
gpt_feedback = This function looks partially correct. However, for every y testing as Falsey
gpt_feedback_length = 12
gpt_score = 3
pedal_feedback = The variable <code class='pedal-name'>forecasts</code> was given a value on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0

[bakery_structures_dataclasses_define_address]
description = An `Address` is a dataclass with the fields `number` (integer), `street` (string), `city` (string), and `state` (string). Define the dataclass, create an instance representing the address `18 Amstel Ave, Newark, DE`, store the `Address` in the variable `location`, and print the instance's state field.
	
	If you can't tell, the `street` portion is `Amstel Ave`. Do not include the commas in the `street`, `city`, or `state`.
	
	Hint: Print the instance's **state field**. Do not print the entire instance!

[bakery_structures_dataclasses_define_address.Aurorus_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number:int
	    street:str
	    city:str
	    state:str
	location=Address(18,"Amstel Ave","Newark","DE")
	print(location)
gpt_feedback = Please provide the reason why dataclass decorator is used before a class.
gpt_feedback_length = 12
gpt_score = 7
pedal_feedback = You must use an attribute lookup (access a field).
pedal_feedback_length = 9
pedal_score = 0

[bakery_structures_dataclasses_define_address.Krookodile_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class = Address
	    number = int
	    street = str
	    city = str
	    state = str
	
	location = Address(18, "Amstel Ave", "Newark", "DE")
	print(location.state)
gpt_feedback = Line 4: it seems like there is a className not declared upfront.
gpt_feedback_length = 12
gpt_score = 6
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\sigcse24/bakery_structures_dataclasses_define_address/submissions/Krookodile_1.py</code>
	<pre class='pedal-python-code python'><code>class = Address
	      ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 39
pedal_score = 0

[bakery_structures_dataclasses_define_address.Vanillish_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number: int
	    street: str
	    city: str
	    state: str
	    
	location = Address(18,'Amstel Ave', 'Newark','DE')
	print(location.state)
gpt_feedback = The code is working as expected.
gpt_feedback_length = 6
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1

[bakery_structures_dataclass_ops_merge_recipes]
description = Define a function `merge_recipes` that consumes two `Recipe` instances and produces a new `Recipe` instance by adding together each of the fields.
	
	A `Recipe` is a dataclass with four fields: `flour` (int), `eggs` (int), `milk` (int), and `sugar` (int).

[bakery_structures_dataclass_ops_merge_recipes.Cyndaquil_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour:int
	    eggs:int
	    milk:int
	    sugar:int
	    
	def merg_recipes(rec:Recipe, rec2:Recipe) -> Recipe:
	     rec = Recipe(1,3,2,2)
	         rec2 = Recipe(3,4,2,4):
	            return rec + rec2
gpt_feedback = There are a couple of unnecessary changes necessary to deliver your expected result:
gpt_feedback_length = 13
gpt_score = 7
pedal_feedback = Bad indentation on line 13 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 13 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\sigcse24/bakery_structures_dataclass_ops_merge_recipes/submissions/Cyndaquil_1.py</code>
	<pre class='pedal-python-code python'><code>         rec2 = Recipe(3,4,2,4):
	        ^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 13, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 53
pedal_score = 0

[bakery_structures_dataclass_ops_merge_recipes.Darumaka_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk: int
	    sugar: int
	
	def merge_recipes (rec1:Recipe, rec2:Recipe)->Recipe:
	    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	
	assert_equal(merge recipies(1,2,1,3,1,2,3,2), 3,4,3,5)
gpt_feedback = 
gpt_feedback_length = 
gpt_score = -1
pedal_feedback = 
pedal_feedback_length = -1
pedal_score = -1

[bakery_structures_dataclass_ops_merge_recipes.Elgyem_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk:int
	    sugar:int
	    
	def merge_recipes(rec:Recipe,re:Recipe)->Recipe:
	    new=Recipe(rec.flour+re.flour,rec.eggs+re.eggs,rec.milk+re.milk,rec.sugar+re.sugar)
	    return new
	rec= Recipe(1,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(3,4,4,6))
	rec= Recipe(2,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(4,4,4,6))
gpt_feedback = Your code looks like it's implemented correctly.
gpt_feedback_length = 7
gpt_score = 9
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1

[bakery_structures_dataclass_ops_point_turtle]
description = Define a function `point_turtle` that consumes a `Turtle` and an integer (representing a new direction), and produces a new `Turtle` with its direction updated to the new value.
	
	A `Turtle` is a dataclass with the fields `speed` (int) and `direction` (int).

[bakery_structures_dataclass_ops_point_turtle.Anorith_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	
	def point_turtle(turt: Turtle, direct: int) -> Turtle:
	    turt.direction = direct
	    return turt
	
	assert_equal(point_turtle(Turtle(2, 1), 3), Turtle(2, 3))
	assert_equal(point_turtle(Turtle(3, 1), 3), Turtle(3, 3))
	assert_equal(point_turtle(Turtle(4, 1), 3), Turtle(4, 3))
gpt_feedback = The code appears to be correct.
gpt_feedback_length = 6
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1

[bakery_structures_dataclass_ops_point_turtle.Luxio_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int 
	    direction: int
	
	def point_turtle(ogTurtle: Turtle, newDirection: int):
	    return Turtle(ogTurtle.speed, newDirection)
	
	assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
gpt_feedback = You missed a closing parenthesis ')' on the line containing the test case assert_equal.
gpt_feedback_length = 14
gpt_score = 7
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\sigcse24/bakery_structures_dataclass_ops_point_turtle/submissions/Luxio_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
	            ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 49
pedal_score = 0

[bakery_structures_dataclass_ops_point_turtle.Skuntank_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	    
	def point_turtle(t: Turtle, integer: int) -> Turtle:
	    t.direction = integer
	    return Turtle(t.speed, t.direction)
	
	assert_equal(point_turtle(Turtle(10,20),10), Turtle(10,10))
	assert_equal(point_turtle(Turtle(20,20),10), Turtle(20,10))
gpt_feedback = Your code looks great!
gpt_feedback_length = 4
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1

[bakery_structures_lists_code_book_list]
description = Create a list of 3 strings that represent the names of your favorite books and store them in a variable. Print this variable.

[bakery_structures_lists_code_book_list.Phanpy_1.py]
student_code = 
	Mfb=["dark","shark","bee"]
	print(Mfb)
gpt_feedback = Great job on how you defined the variable Mfb. It is useful code information to represent the list ['dark', 'shark', 'bee'].
	Right now, you printed the variable using the print function to show what the variable Mfb contains.
gpt_feedback_length = 37
gpt_score = 7
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1

[bakery_structures_lists_code_book_list.Riolu_1.py]
student_code = 
	my_books = ["Harry Potter", "Percy Jackson", "The Prince of Mist"]
	print(my_books)
gpt_feedback = The code looks good and will print the contents of 'my_books' list.
gpt_feedback_length = 12
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1

[bakery_structures_lists_code_book_list.Torchic_1.py]
student_code = 
	books = ["book1", "book2", "book3"]
	print(books)
gpt_feedback = The code looks fine. It will print the list of books.
gpt_feedback_length = 11
gpt_score = 7
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1

[bakery_structures_mutability_code_lower_rent]
description = The following message was originally shouting too loudly, and the author wants to have it quieter (by making it lowercase). However, it doesn't seem to be working. Fix the code so that variable's value is correctly lowered.

[bakery_structures_mutability_code_lower_rent.Carvanha_1.py]
student_code = 
	def make_lower(upper_case:str) -> str:
	    message = "THE RENT IS TOO HIGH!"
	    lower_case = message.lower()
	    return message
	
	print(make_lower)
gpt_feedback = The call to the make_lower function doesn't actually call the function.
gpt_feedback_length = 11
gpt_score = 4
pedal_feedback = Student code failed instructor test.
	I ran your code.
	The variable message was not created.
pedal_feedback_length = 13
pedal_score = 0

[bakery_structures_mutability_code_lower_rent.Happiny_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = You successfully converted the string to lowercase using the 'lower()' method.
gpt_feedback_length = 11
gpt_score = 9
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1

[bakery_structures_mutability_code_lower_rent.Victreebel_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Great job! You successfully converted the message to TOTCase (also known as lowercase). Keep up the good work!
gpt_feedback_length = 18
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1

